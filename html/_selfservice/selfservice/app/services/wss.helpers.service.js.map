{"version":3,"sources":["../../../_itsm_default_v2_template/app/services/wss.helpers.service.js"],"names":["angular","module","factory","wssHelpers","$inject","store","$rootScope","$q","$http","XMLMCService","wssLogging","self","hasWebflag","option","sessionDetails","get","webFlags","sysWebFlags","isManager","custDetails","flg_manager","callrefValue","strCallref","callRef","replace","parseInt","setBranding","brandTextTitle","wssBranding","loginTitle","brandSubTitle","loginSubTitle","panelPrimaryHeaderColor","panelPrimaryHeaderBGColour","panelPrimaryTitleColor","panelPrimaryHeaderTitleColour","panelDefaultHeaderColor","panelDefaultHeaderBGColour","panelDefaultTitleColor","panelDefaultHeaderTitleColour","titleCircleColour","socialMedia","unflattenTreeview","arr","key","treeArr","mappedArr","arrElem","mappedElem","i","len","length","children","label","hasOwnProperty","parentlabel","push","getTableSettings","settingId","boolSchema","adminModalNew","deferred","defer","sqparams","xmlmc","MethodCall","addParam","invoke","onSuccess","params","rowData","resolve","fromJson","row","wss_config","objSettings","onFailure","error","logger","reject","promise","updateTableSettings","objSetting","encodeBase64","toJson","resetTableSettings","insertTableSettings","getTableConfig","then","settingJSON","returnResponse","outputSQLColumns","filterSQLColumns","outputOrderBy","forEach","columns","objColumn","dbtable","column","isDefined","searchInclude","orderBy","objOrderBy","table","direction","processAdditionalTables","objConfig","strAddTables","tableJoins","oValue","joinTable","joinTableColumn","joinWithTable","joinWithTableColumn","joinType","decodeBase64","strB64","fileContent","Base64Binary","decode"],"mappings":"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","file":"wss.helpers.service.js","sourcesContent":["(function (){\r\n    'use strict';\r\n    angular\r\n      .module('swSelfService')\r\n      .factory('wssHelpers', wssHelpers);\r\n\r\n    wssHelpers.$inject=['store','$rootScope', '$q','$http','XMLMCService','wssLogging'];\r\n\r\n    function wssHelpers(store, $rootScope, $q, $http, XMLMCService, wssLogging) {\r\n      var self = {\r\n        'sysWebFlags': {\r\n          'OPTION_HAS_WEB_ACCESS': 1,\r\n          'OPTION_CAN_LOG_CALLS': 2,\r\n          'OPTION_CAN_UPDATE_CALLS': 4,\r\n          'OPTION_CAN_VIEW_CALLS': 8,\r\n          'OPTION_CAN_VIEW_SITECALLS': 16,\r\n          'OPTION_CAN_VIEW_ORGCALLS': 32,\r\n          'OPTION_CAN_CLOSE_CALLS': 64,\r\n          'OPTION_CAN_VIEW_MULTI_ORGCALLS': 128,\r\n          'OPTION_REMOTE_SUPPORT': 4096,\r\n          'OPTION_ADMIN': 8192\r\n        }\r\n      };\r\n\r\n      // hasWebflag - takes webflag option, checks to see if session webflag holds option bit\r\n      // Returns true is customer has webflag option set, false if not\r\n      self.hasWebflag = function(option){\r\n        if(self.sessionDetails = store.get('sessionConfig')) {\r\n          return ((self.sessionDetails.webFlags & self.sysWebFlags[option]) > 0) ? true:false;\r\n        }\r\n        return false;\r\n      };\r\n\r\n      //isManager - returns true if session customer is a manager, false if not\r\n      self.isManager = function(){\r\n        if(self.custDetails = store.get('custDetails')){\r\n          return (self.custDetails.flg_manager == 1) ? true:false;\r\n        }\r\n        return false;\r\n      };\r\n\r\n      self.callrefValue = function(strCallref) {\r\n        var callRef = strCallref.replace(/\\D/g,'');\r\n        callRef = parseInt(callRef, 10);\r\n        return callRef;\r\n      };\r\n\r\n      self.setBranding = function() {\r\n        //Get Branding from Config\r\n        $rootScope.brandTextTitle = wssBranding.loginTitle;\r\n        $rootScope.brandSubTitle = wssBranding.loginSubTitle;\r\n        $rootScope.panelPrimaryHeaderColor = wssBranding.panelPrimaryHeaderBGColour;\r\n        $rootScope.panelPrimaryTitleColor = wssBranding.panelPrimaryHeaderTitleColour;\r\n        $rootScope.panelDefaultHeaderColor = wssBranding.panelDefaultHeaderBGColour;\r\n        $rootScope.panelDefaultTitleColor = wssBranding.panelDefaultHeaderTitleColour;\r\n        $rootScope.titleCircleColour = wssBranding.titleCircleColour;\r\n        $rootScope.socialMedia = wssBranding.socialMedia;\r\n      };\r\n\r\n      self.unflattenTreeview = function(arr, key) {\r\n        // Partials from http://stackoverflow.com/questions/18017869/build-tree-array-from-flat-array-in-javascript\r\n        var treeArr = [],\r\n            mappedArr = {},\r\n            arrElem,\r\n            mappedElem;\r\n\r\n        // First map the nodes of the array to an object -> create a hash table.\r\n        for(var i = 0, len = arr.length; i < len; i++) {\r\n          arrElem = arr[i];\r\n          mappedArr[arrElem[key]] = arrElem;\r\n          mappedArr[arrElem[key]].children = [];\r\n        }\r\n\r\n        for (var label in mappedArr) {\r\n          if (mappedArr.hasOwnProperty(label)) {\r\n            mappedElem = mappedArr[label];\r\n            // If the element is not at the root level, add it to its parent array of children.\r\n            if (mappedElem.parentlabel) {\r\n              mappedArr[mappedElem.parentlabel].children.push(mappedElem);\r\n            }\r\n            // If the element is at the root level, add it to first level elements array.\r\n            else {\r\n              treeArr.push(mappedElem);\r\n            }\r\n          }\r\n        }\r\n        return treeArr;\r\n      };\r\n\r\n      //Get and process JSON for data output\r\n      self.getTableSettings = function(settingId, boolSchema) {\r\n        $rootScope.adminModalNew = true;\r\n        var deferred = $q.defer();\r\n        var sqparams = \"settingid=\"+settingId;\r\n        var xmlmc = new XMLMCService.MethodCall();\r\n        xmlmc.addParam(\"storedQuery\", \"query/wss/admin/admin.tablesettings.get\");\r\n        xmlmc.addParam(\"parameters\", sqparams);\r\n        xmlmc.invoke(\"data\", \"invokeStoredQuery\", {\r\n          onSuccess: function(params){\r\n            if(params.rowData && !boolSchema){\r\n              $rootScope.adminModalNew = false;\r\n              deferred.resolve(angular.fromJson(params.rowData.row.wss_config));\r\n            } else {\r\n              var objSettings = {};\r\n              $rootScope.adminModalNew = true;\r\n              deferred.resolve(objSettings);\r\n            }\r\n          },\r\n          onFailure: function(error){\r\n            $rootScope.adminModalNew = true;\r\n            wssLogging.logger(error, \"ERROR\", \"wssHelpers::getTableSettings\", false, false);\r\n            deferred.reject(error);\r\n          }\r\n        });\r\n        return deferred.promise;\r\n      };\r\n\r\n      //Update table settings\r\n      self.updateTableSettings = function(settingId, objSetting) {\r\n        var deferred = $q.defer();\r\n        var xmlmc = new XMLMCService.MethodCall();\r\n        var sqparams = \"settingid=\"+settingId;\r\n        sqparams += \"&settings=\"+xmlmc.encodeBase64(angular.toJson(objSetting, true));\r\n        xmlmc.addParam(\"storedQuery\", \"query/wss/admin/admin.tablesettings.update\");\r\n        xmlmc.addParam(\"parameters\", sqparams);\r\n        xmlmc.invoke(\"data\", \"invokeStoredQuery\", {\r\n          onSuccess: function(params){\r\n            deferred.resolve(params);\r\n          },\r\n          onFailure: function(error){\r\n            wssLogging.logger(error, \"ERROR\", \"wssHelpers::updateTableSettings\", false, false);\r\n            deferred.reject(error);\r\n          }\r\n        });\r\n        return deferred.promise;\r\n      };\r\n\r\n      //Update table settings\r\n      self.resetTableSettings = function(settingId) {\r\n        var deferred = $q.defer();\r\n        var xmlmc = new XMLMCService.MethodCall();\r\n        var sqparams = \"settingid=\"+settingId;\r\n        xmlmc.addParam(\"storedQuery\", \"query/wss/admin/admin.tablesettings.reset\");\r\n        xmlmc.addParam(\"parameters\", sqparams);\r\n        xmlmc.invoke(\"data\", \"invokeStoredQuery\", {\r\n          onSuccess: function(params){\r\n            deferred.resolve(params);\r\n          },\r\n          onFailure: function(error){\r\n            wssLogging.logger(error, \"ERROR\", \"wssHelpers::resetTableSettings\", false, false);\r\n            deferred.reject(error);\r\n          }\r\n        });\r\n        return deferred.promise;\r\n      };\r\n\r\n      //Add table settings\r\n      self.insertTableSettings = function(settingId, objSetting) {\r\n        var deferred = $q.defer();\r\n        var xmlmc = new XMLMCService.MethodCall();\r\n        var sqparams = \"settingid=\"+settingId;\r\n        sqparams += \"&settings=\"+xmlmc.encodeBase64(angular.toJson(objSetting, true));\r\n        xmlmc.addParam(\"storedQuery\", \"query/wss/admin/admin.tablesettings.insert\");\r\n        xmlmc.addParam(\"parameters\", sqparams);\r\n        xmlmc.invoke(\"data\", \"invokeStoredQuery\", {\r\n          onSuccess: function(params){\r\n            deferred.resolve(params);\r\n          },\r\n          onFailure: function(error){\r\n            wssLogging.logger(error, \"ERROR\", \"wssHelpers::insertTableSettings\", false, false);\r\n            deferred.reject(error);\r\n          }\r\n        });\r\n        return deferred.promise;\r\n      };\r\n\r\n      //Get and process configuration file for table output\r\n      self.getTableConfig = function(settingId, boolSchema) {\r\n        var deferred = $q.defer();\r\n        self.getTableSettings(settingId, boolSchema).then(function(settingJSON){\r\n          var returnResponse = settingJSON;\r\n          returnResponse.outputSQLColumns = '';\r\n          returnResponse.filterSQLColumns = '';\r\n          returnResponse.outputOrderBy = '';\r\n          angular.forEach(returnResponse.columns, function(objColumn){\r\n            //Build outputSQLColumns columns string\r\n            if (returnResponse.outputSQLColumns !== '') {\r\n              returnResponse.outputSQLColumns += \", \";\r\n            }\r\n            returnResponse.outputSQLColumns += objColumn.dbtable+'.'+objColumn.column;\r\n            //Build searchInclude finter columns string\r\n            if(angular.isDefined(objColumn.searchInclude) && objColumn.searchInclude === true){\r\n              if (returnResponse.filterSQLColumns !== '') {\r\n                returnResponse.filterSQLColumns += \"|\";\r\n              }\r\n              returnResponse.filterSQLColumns += objColumn.dbtable+'.'+objColumn.column;\r\n            }\r\n          });\r\n          //Process Order By\r\n          angular.forEach(returnResponse.orderBy, function(objOrderBy){\r\n            //Build outputOrderBy string\r\n            if (returnResponse.outputOrderBy !== '') {\r\n              returnResponse.outputOrderBy += \", \";\r\n            }\r\n            returnResponse.outputOrderBy += objOrderBy.table+'.'+objOrderBy.column+' '+objOrderBy.direction;\r\n          });\r\n          deferred.resolve(returnResponse);\r\n        }, function(error){\r\n          wssLogging.logger(error, \"ERROR\", \"wssHelpers::getTableConfig\", false);\r\n          deferred.reject(error);\r\n        });\r\n\r\n        return deferred.promise;\r\n      };\r\n\r\n      //Table Data Stored Queries: Take a config object, pass back pipe seperated string of tables & config to join to\r\n      self.processAdditionalTables = function(objConfig){\r\n        var strAddTables = '';\r\n        if(angular.isDefined(objConfig) && angular.isDefined(objConfig.tableJoins)){\r\n          angular.forEach(objConfig.tableJoins, function(oValue){\r\n            if(strAddTables !== '') {\r\n              strAddTables += '||';\r\n            }\r\n            strAddTables = strAddTables+oValue.joinTable+\"|\"+oValue.joinTableColumn+\"|\"+oValue.joinWithTable+\"|\"+oValue.joinWithTableColumn+\"|\"+oValue.joinType;\r\n          });\r\n        }\r\n        return strAddTables;\r\n      };\r\n\r\n\r\n      self.decodeBase64 = function (strB64) {\r\n        var deferred = $q.defer();\r\n        //Using a 3rd party Base64 Decoder that supports Binary decoding - it's in additional-js.js\r\n        var fileContent = Base64Binary.decode(strB64);\r\n        deferred.resolve(fileContent);\r\n        return deferred.promise;\r\n      };\r\n\r\n      return self;\r\n    }\r\n  })();\r\n"]}