{"version":3,"sources":["../../../_itsm_default_v2_template/app/services/wss.logging.service.js"],"names":["angular","module","factory","wssLogging","$inject","$q","XMLMCService","toaster","self","logger","logDesc","logType","logSource","boolConsole","boolToast","toastTitle","deferred","defer","logDescription","isArray","isObject","forEach","logVal","logKey","objLog","logContent","console","log","toastType","sendToast","xmlmc","MethodCall","sqparams","addParam","invoke","onSuccess","params","resolve","onFailure","error","reject","promise","toastBody","toastObject","type","body","isDefined","title","pop"],"mappings":"AAAA,CAAC,YAAW;AACR;;AACAA,UACGC,MADH,CACU,eADV,EAEGC,OAFH,CAEW,YAFX,EAEyBC,UAFzB;;AAIAA,aAAWC,OAAX,GAAmB,CAAC,IAAD,EAAM,cAAN,EAAqB,SAArB,CAAnB;;AAEA,WAASD,UAAT,CAAoBE,EAApB,EAAwBC,YAAxB,EAAsCC,OAAtC,EAA+C;AAC7C,QAAIC,OAAO,EAAX;;AAEA;AACAA,SAAKC,MAAL,GAAc,UAASC,OAAT,EAAkBC,OAAlB,EAA2BC,SAA3B,EAAsCC,WAAtC,EAAmDC,SAAnD,EAA8DC,UAA9D,EAA0E;AACtF,UAAIC,WAAWX,GAAGY,KAAH,EAAf;AACA,UAAIC,iBAAiB,EAArB;AACA,UAAIlB,QAAQmB,OAAR,CAAgBT,OAAhB,KAA4BV,QAAQoB,QAAR,CAAiBV,OAAjB,CAAhC,EAA0D;AACxDV,gBAAQqB,OAAR,CAAgBX,OAAhB,EAAyB,UAASY,MAAT,EAAiBC,MAAjB,EAAwB;AAC/C,cAAGL,mBAAmB,EAAtB,EAA0B;AACxBA,8BAAkB,IAAlB;AACD;AACDA,4BAAkB,MAAIK,MAAJ,GAAW,IAAX,GAAiBD,MAAnC;AACD,SALD;AAMD,OAPD,MAOO;AACLJ,yBAAiBR,OAAjB;AACD;;AAED;AACA,UAAGG,gBAAgB,IAAnB,EAAyB;AACvB,YAAIW,SAAS;AACXZ,qBAAWA,SADA;AAEXD,mBAASA,OAFE;AAGXc,sBAAYf;AAHD,SAAb;AAKAgB,gBAAQC,GAAR,CAAYH,MAAZ;AACD;;AAED,UAAGV,cAAc,IAAjB,EAAsB;AACpB,YAAIc,YAAY,EAAhB;AACA,gBAAOjB,OAAP;AACE,eAAK,MAAL;AACEiB,wBAAY,SAAZ;AACA;AACF,eAAK,OAAL;AACEA,wBAAY,OAAZ;AACA;AACF;AACEA,wBAAY,MAAZ;AARJ;AAUApB,aAAKqB,SAAL,CAAeD,SAAf,EAA0BV,cAA1B,EAA0CH,UAA1C;AACD;;AAED,UAAIe,QAAQ,IAAIxB,aAAayB,UAAjB,EAAZ;AACA,UAAIC,WAAW,gBAAf;AACAA,kBAAY,cAAYrB,OAAxB;AACAqB,kBAAY,cAAYd,cAAxB;AACAc,kBAAY,gBAAcpB,SAA1B;AACAkB,YAAMG,QAAN,CAAe,aAAf,EAA8B,sCAA9B;AACAH,YAAMG,QAAN,CAAe,YAAf,EAA6BD,QAA7B;AACAF,YAAMI,MAAN,CAAa,MAAb,EAAqB,mBAArB,EAA0C;AACxCC,mBAAW,UAASC,MAAT,EAAgB;AACzBpB,mBAASqB,OAAT,CAAiBD,MAAjB;AACD,SAHuC;AAIxCE,mBAAW,UAASC,KAAT,EAAe;AACxBb,kBAAQC,GAAR,CAAYY,KAAZ;AACAvB,mBAASwB,MAAT,CAAgBD,KAAhB;AACD;AAPuC,OAA1C;AASA,aAAOvB,SAASyB,OAAhB;AACD,KAxDD;;AA0DAjC,SAAKqB,SAAL,GAAiB,UAASD,SAAT,EAAoBc,SAApB,EAA+B3B,UAA/B,EAA0C;AACzD,UAAI4B,cAAc;AAChBC,cAAMhB,SADU;AAEhBiB,cAAMH;AAFU,OAAlB;;AAKA,UAAG1C,QAAQ8C,SAAR,CAAkB/B,UAAlB,KAAiCA,eAAe,EAAnD,EAAsD;AACpD4B,oBAAYI,KAAZ,GAAoBhC,UAApB;AACD;AACDR,cAAQyC,GAAR,CAAYL,WAAZ;AACD,KAVD;;AAYA,WAAOnC,IAAP;AACD;AAEF,CArFH","file":"wss.logging.service.js","sourcesContent":["(function (){\r\n    'use strict';\r\n    angular\r\n      .module('swSelfService')\r\n      .factory('wssLogging', wssLogging);\r\n\r\n    wssLogging.$inject=['$q','XMLMCService','toaster'];\r\n\r\n    function wssLogging($q, XMLMCService, toaster) {\r\n      var self = {};\r\n\r\n      //Log File Entry\r\n      self.logger = function(logDesc, logType, logSource, boolConsole, boolToast, toastTitle) {\r\n        var deferred = $q.defer();\r\n        var logDescription = '';\r\n        if (angular.isArray(logDesc) || angular.isObject(logDesc)){\r\n          angular.forEach(logDesc, function(logVal, logKey){\r\n            if(logDescription !== '') {\r\n              logDescription += ', ';\r\n            }\r\n            logDescription += '['+logKey+'] '+ logVal;\r\n          });\r\n        } else {\r\n          logDescription = logDesc;\r\n        }\r\n\r\n        //Output to console\r\n        if(boolConsole === true) {\r\n          var objLog = {\r\n            logSource: logSource,\r\n            logType: logType,\r\n            logContent: logDesc\r\n          };\r\n          console.log(objLog);\r\n        }\r\n\r\n        if(boolToast === true){\r\n          var toastType = '';\r\n          switch(logType) {\r\n            case 'WARN':\r\n              toastType = 'warning';\r\n              break;\r\n            case 'ERROR':\r\n              toastType = 'error';\r\n              break;\r\n            default:\r\n              toastType = 'info';\r\n          }\r\n          self.sendToast(toastType, logDescription, toastTitle);\r\n        }\r\n\r\n        var xmlmc = new XMLMCService.MethodCall();\r\n        var sqparams = \"logclass=SYSTM\";\r\n        sqparams += \"&logtype=\"+logType;\r\n        sqparams += \"&logdesc=\"+logDescription;\r\n        sqparams += \"&logsource=\"+logSource;\r\n        xmlmc.addParam(\"storedQuery\", \"query/wss/admin/admin.logging.insert\");\r\n        xmlmc.addParam(\"parameters\", sqparams);\r\n        xmlmc.invoke(\"data\", \"invokeStoredQuery\", {\r\n          onSuccess: function(params){\r\n            deferred.resolve(params);\r\n          },\r\n          onFailure: function(error){\r\n            console.log(error);\r\n            deferred.reject(error);\r\n          }\r\n        });\r\n        return deferred.promise;\r\n      };\r\n\r\n      self.sendToast = function(toastType, toastBody, toastTitle){\r\n        var toastObject = {\r\n          type: toastType,\r\n          body: toastBody\r\n        };\r\n\r\n        if(angular.isDefined(toastTitle) && toastTitle !== ''){\r\n          toastObject.title = toastTitle;\r\n        }\r\n        toaster.pop(toastObject);\r\n      };\r\n\r\n      return self;\r\n    }\r\n\r\n  })();\r\n"]}