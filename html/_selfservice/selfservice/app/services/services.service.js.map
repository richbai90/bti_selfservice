{"version":3,"sources":["../../../_itsm_default_v2_template/app/services/services.service.js"],"names":["angular","module","factory","ServicesService","$inject","$q","XMLMCService","$rootScope","$state","toaster","store","wssLogging","self","getPagedServices","custDetails","get","servicesLoading","selectedService","getCustomerFavourites","then","favSearched","getCustomerManaged","getServicePage","getCustServices","deferred","defer","resolve","getAllServices","promise","serviceArray","getServiceCount","response","totalServices","getServices","params","error","listType","getAllCustServices","reject","getServiceDetails","my_service","XMLCResponde","sqparams","xmlmc","MethodCall","addParam","invoke","onSuccess","onFailure","logger","activeRequest","servId","keysearch","rowData","Object","prototype","toString","call","row","intArrayLength","length","i","push","closeRequest","displayRequest","reqFormatCallref","go","requestID","addCustomerFavourite","subsId","addFavSQ","favServices","delCustomerFavourite","delFavSQ","ownServices","getOwnSQ","pk_auto_id","getFavSQ","fk_service","boolProcessCount","encodeURIComponent","search","category","currCountSQ","servCountSQ","currPagedSQ","servResultsSQ","favStr","forEach","value","key","ownServCountSQ","ownServResultsSQ","ownStr","unsubServCountSQ","unsubServResultsSQ","cnt","currPageNum","pageNo","orderBy","totalPages","Math","ceil","rowsPerPage","custServResultsSQ","getSubscriptionRecord","objSubs","watchFilters","$watch","newVal","oldVal","isDefined"],"mappings":"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","file":"services.service.js","sourcesContent":["(function () {\r\n  'use strict';\r\n  angular\r\n    .module('swSelfService')\r\n    .factory('ServicesService', ServicesService);\r\n\r\n  ServicesService.$inject = ['$q', 'XMLMCService', '$rootScope', '$state', 'toaster', 'store', 'wssLogging'];\r\n\r\n  function ServicesService($q, XMLMCService, $rootScope, $state, toaster, store, wssLogging) {\r\n    var self = {\r\n      'servicesLoading': false,\r\n      'servCountSQ': 'query/wss/services/services.list.count',\r\n      'servResultsSQ': 'query/wss/services/services.list.paged',\r\n      'custServResultsSQ': 'query/wss/services/services.list.get',\r\n      'ownServCountSQ': 'query/wss/services/services.own.list.count',\r\n      'ownServResultsSQ': 'query/wss/services/services.own.list.paged',\r\n      'unsubServCountSQ': 'query/wss/services/services.unsub.list.count',\r\n      'unsubServResultsSQ': 'query/wss/services/services.unsub.list.paged',\r\n      'getOwnSQ': 'query/wss/services/services.own.get',\r\n      'getFavSQ': 'query/wss/services/services.fav.get',\r\n      'addFavSQ': 'query/wss/services/services.fav.add',\r\n      'delFavSQ': 'query/wss/services/services.fav.del',\r\n      'selectedService': null,\r\n      'serviceArray': [],\r\n      'totalServices': 0,\r\n      'rowsPerPage': 6,\r\n      'pageNo': 1,\r\n      'search': '',\r\n      'orderBy': '',\r\n      'category': '',\r\n      'listType': 'cust',\r\n      'favServices': [],\r\n      'favStr': '',\r\n      'ownServices': [],\r\n      'ownStr': '',\r\n      'favSearched': false\r\n    };\r\n\r\n    //Could be cust, fav or unsub\r\n    self.getPagedServices = function () {\r\n      if (self.custDetails = store.get(\"custDetails\")) {\r\n        self.servicesLoading = true;\r\n        self.selectedService = null;\r\n        self.getCustomerFavourites().then(function () {\r\n          self.favSearched = true;\r\n          self.getCustomerManaged().then(function () {\r\n            self.getServicePage();\r\n          });\r\n        });\r\n      }\r\n    };\r\n\r\n    self.getCustServices = function () {\r\n      var deferred = $q.defer();\r\n      if (self.custDetails = store.get(\"custDetails\")) {\r\n        self.servicesLoading = true;\r\n        self.selectedService = null;\r\n        self.getCustomerFavourites().then(function () {\r\n          self.favSearched = true;\r\n          self.getCustomerManaged().then(function () {\r\n            deferred.resolve(self.getAllServices());\r\n          });\r\n        });\r\n      }\r\n      return deferred.promise;\r\n    };\r\n\r\n    self.getServicePage = function () {\r\n      self.serviceArray = [];\r\n      self.getServiceCount()\r\n        .then(function (response) {\r\n          self.totalServices = response;\r\n          self.getServices()\r\n            .then(function (params) {\r\n              self.servicesLoading = false;\r\n              self.serviceArray = params;\r\n            }, function (error) {\r\n              self.servicesLoading = false;\r\n              self.totalServices = 0;\r\n            });\r\n        }, function (error) {\r\n          self.totalServices = 0;\r\n          self.servicesLoading = false;\r\n        });\r\n    };\r\n    self.getAllServices = function () {\r\n      self.listType = 'cust';\r\n      var deferred = $q.defer();\r\n      self.serviceArray = [];\r\n      self.getServiceCount()\r\n        .then(function (response) {\r\n          self.totalServices = response;\r\n          self.getAllCustServices()\r\n            .then(function (params) {\r\n              self.servicesLoading = false;\r\n              self.serviceArray = params;\r\n              deferred.resolve(params);\r\n            }, function (error) {\r\n              self.servicesLoading = false;\r\n              self.totalServices = 0;\r\n              deferred.reject(error);\r\n            });\r\n        }, function (error) {\r\n          self.totalServices = 0;\r\n          self.servicesLoading = false;\r\n          deferred.reject(error);\r\n        });\r\n\r\n      return deferred.promise;\r\n    };\r\n\r\n    //Call to XMLMC to get the details of a service based in his fk_cmdb_id\r\n    self.getServiceDetails = function (my_service) {\r\n      var XMLCResponde = {};\r\n      var deferred = $q.defer();\r\n      var sqparams = \"sid=\" + my_service;\r\n      var xmlmc = new XMLMCService.MethodCall();\r\n      xmlmc.addParam(\"storedQuery\", \"query/wss/services/services.details\");\r\n      xmlmc.addParam(\"parameters\", sqparams);\r\n      xmlmc.invoke(\"data\", \"invokeStoredQuery\", {\r\n        onSuccess: function (params) {\r\n          //XMLC was succesfull\r\n          deferred.resolve(params);\r\n        },\r\n\r\n        onFailure: function (error) {\r\n          wssLogging.logger(error, \"ERROR\", \"ServicesService::getServiceDetails\", false, false);\r\n          //Send a toaster and change state back to Home?\r\n          deferred.reject(error);\r\n        }\r\n      });\r\n      return deferred.promise;\r\n    };\r\n\r\n    self.activeRequest = function (servId) {\r\n      var activeRequest = [];\r\n      var sqparams = \"custid=\" + self.custDetails.keysearch;\r\n      sqparams += \"&sid=\" + servId;\r\n      var xmlmc = new XMLMCService.MethodCall();\r\n      var deferred = $q.defer();\r\n      xmlmc.addParam(\"storedQuery\", \"query/wss/services/services.activerequest\");\r\n      xmlmc.addParam(\"parameters\", sqparams);\r\n      xmlmc.invoke(\"data\", \"invokeStoredQuery\", {\r\n        onSuccess: function (params) {\r\n          //XMLC was succesfull\r\n          if (params.rowData) {\r\n            if (Object.prototype.toString.call(params.rowData.row) === '[object Array]') {\r\n              var intArrayLength = params.rowData.row.length;\r\n              //obj is array\r\n              for (var i = 0; i < intArrayLength; i++) {\r\n                activeRequest.push(params.rowData.row[i]);\r\n              }\r\n            }\r\n            else {\r\n              activeRequest.push(params.rowData.row);\r\n            }\r\n            deferred.resolve(activeRequest);\r\n          }\r\n          else {\r\n            deferred.resolve(activeRequest);\r\n          }\r\n        },\r\n\r\n        onFailure: function (error) {\r\n          //Send a toaster and change state back to Home?\r\n          deferred.reject(error);\r\n        }\r\n      });\r\n      return deferred.promise;\r\n    };\r\n\r\n\r\n    self.closeRequest = function (servId) {\r\n      var sqparams = \"custid=\" + self.custDetails.keysearch;\r\n      var closeRequest = [];\r\n      sqparams += \"&sid=\" + servId;\r\n\r\n      var xmlmc = new XMLMCService.MethodCall();\r\n      var deferred = $q.defer();\r\n      xmlmc.addParam(\"storedQuery\", \"query/wss/services/services.closerequest\");\r\n      xmlmc.addParam(\"parameters\", sqparams);\r\n      xmlmc.invoke(\"data\", \"invokeStoredQuery\", {\r\n        onSuccess: function (params) {\r\n          //XMLC was succesfull\r\n          if (params.rowData) {\r\n            if (Object.prototype.toString.call(params.rowData.row) === '[object Array]') {\r\n              var intArrayLength = params.rowData.row.length;\r\n              //obj is array\r\n              for (var i = 0; i < intArrayLength; i++) {\r\n                closeRequest.push(params.rowData.row[i]);\r\n              }\r\n            }\r\n            else {\r\n              closeRequest.push(params.rowData.row);\r\n            }\r\n            deferred.resolve(closeRequest);\r\n          }\r\n          else {\r\n            deferred.resolve(closeRequest);\r\n          }\r\n        },\r\n\r\n        onFailure: function (error) {\r\n          //Send a toaster and change state back to Home?\r\n          deferred.reject(error);\r\n        }\r\n      });\r\n      return deferred.promise;\r\n    };\r\n\r\n\r\n    self.displayRequest = function (reqFormatCallref) {\r\n      $state.go('requestdetails', { requestID: reqFormatCallref });\r\n    };\r\n\r\n\r\n    self.addCustomerFavourite = function (subsId, servId) {\r\n      var deferred = $q.defer();\r\n      var sqparams = \"custid=\" + self.custDetails.keysearch;\r\n      sqparams += \"&subid=\" + subsId;\r\n      var xmlmc = new XMLMCService.MethodCall();\r\n      xmlmc.addParam(\"storedQuery\", self.addFavSQ);\r\n      xmlmc.addParam(\"parameters\", sqparams);\r\n      xmlmc.invoke(\"data\", \"invokeStoredQuery\", {\r\n        onSuccess: function (params) {\r\n          self.favServices[servId] = true;\r\n          deferred.resolve(params);\r\n        },\r\n        onFailure: function (error) {\r\n          wssLogging.logger(error, \"ERROR\", \"ServicesService::addCustomerFavourite\", false, false);\r\n          deferred.reject(error);\r\n        }\r\n      });\r\n      return deferred.promise;\r\n    };\r\n\r\n    self.delCustomerFavourite = function (servId) {\r\n      var deferred = $q.defer();\r\n      var sqparams = \"custid=\" + self.custDetails.keysearch;\r\n      sqparams += \"&servid=\" + servId;\r\n      var xmlmc = new XMLMCService.MethodCall();\r\n      xmlmc.addParam(\"storedQuery\", self.delFavSQ);\r\n      xmlmc.addParam(\"parameters\", sqparams);\r\n      xmlmc.invoke(\"data\", \"invokeStoredQuery\", {\r\n        onSuccess: function (params) {\r\n          self.favServices[servId] = false;\r\n          deferred.resolve(params);\r\n        },\r\n        onFailure: function (error) {\r\n          wssLogging.logger(error, \"ERROR\", \"ServicesService::delCustomerFavourite\", false, false);\r\n          deferred.reject(error);\r\n        }\r\n      });\r\n      return deferred.promise;\r\n    };\r\n\r\n    self.getCustomerManaged = function () {\r\n      var deferred = $q.defer();\r\n      self.ownServices = [];\r\n      var sqparams = \"custid=\" + self.custDetails.keysearch;\r\n      var xmlmc = new XMLMCService.MethodCall();\r\n      xmlmc.addParam(\"storedQuery\", self.getOwnSQ);\r\n      xmlmc.addParam(\"parameters\", sqparams);\r\n      xmlmc.invoke(\"data\", \"invokeStoredQuery\", {\r\n        onSuccess: function (params) {\r\n          if (params.rowData) {\r\n            if (Object.prototype.toString.call(params.rowData.row) === '[object Array]') {\r\n              var intArrayLength = params.rowData.row.length;\r\n              //obj is array\r\n              for (var i = 0; i < intArrayLength; i++) {\r\n                self.ownServices[params.rowData.row[i].pk_auto_id] = true;\r\n              }\r\n            } else {\r\n              self.ownServices[params.rowData.row.pk_auto_id] = true;\r\n            }\r\n            deferred.resolve(self.ownServices);\r\n\r\n          } else {\r\n            deferred.resolve('No Services Returned.');\r\n          }\r\n        },\r\n        onFailure: function (error) {\r\n          wssLogging.logger(error, \"ERROR\", \"ServicesService::getCustomerManaged\", false, false);\r\n          deferred.reject(error);\r\n        }\r\n      });\r\n      return deferred.promise;\r\n    };\r\n\r\n    self.getCustomerFavourites = function () {\r\n      var deferred = $q.defer();\r\n      self.favServices = [];\r\n      var sqparams = \"custid=\" + self.custDetails.keysearch;\r\n      var xmlmc = new XMLMCService.MethodCall();\r\n      xmlmc.addParam(\"storedQuery\", self.getFavSQ);\r\n      xmlmc.addParam(\"parameters\", sqparams);\r\n      xmlmc.invoke(\"data\", \"invokeStoredQuery\", {\r\n        onSuccess: function (params) {\r\n          if (params.rowData) {\r\n            if (Object.prototype.toString.call(params.rowData.row) === '[object Array]') {\r\n              var intArrayLength = params.rowData.row.length;\r\n              //obj is array\r\n              for (var i = 0; i < intArrayLength; i++) {\r\n                self.favServices[params.rowData.row[i].fk_service] = true;\r\n              }\r\n            } else {\r\n              self.favServices[params.rowData.row.fk_service] = true;\r\n            }\r\n            deferred.resolve(self.favServices);\r\n          } else {\r\n            deferred.resolve('No Services Returned.');\r\n          }\r\n        },\r\n        onFailure: function (error) {\r\n          wssLogging.logger(error, \"ERROR\", \"ServicesService::getCustomerFavourites\", false, false);\r\n          deferred.reject(error);\r\n        }\r\n      });\r\n      return deferred.promise;\r\n    };\r\n\r\n    self.getServiceCount = function () {\r\n      var deferred = $q.defer();\r\n      var totalServices = 0;\r\n      var serviceArray = [];\r\n      var boolProcessCount = true;\r\n      var sqparams = \"custid=\" + self.custDetails.keysearch;\r\n      sqparams += \"&dynfilter=\" + encodeURIComponent(self.search);\r\n      sqparams += \"&cat=\" + self.category;\r\n\r\n      switch (self.listType) {\r\n        case 'cust':\r\n          self.currCountSQ = self.servCountSQ;\r\n          self.currPagedSQ = self.servResultsSQ;\r\n          break;\r\n        case 'fav':\r\n          self.currCountSQ = self.servCountSQ;\r\n          self.currPagedSQ = self.servResultsSQ;\r\n          self.favStr = '';\r\n          if (self.favServices.length > 0) {\r\n            angular.forEach(self.favServices, function (value, key) {\r\n              if (value === true) {\r\n                if (self.favStr !== '') self.favStr += \",\";\r\n                self.favStr += key;\r\n              }\r\n            });\r\n            if (self.favStr !== '') {\r\n              sqparams += \"&favstr=\" + self.favStr;\r\n              boolProcessCount = true;\r\n            } else {\r\n              boolProcessCount = false;\r\n              deferred.resolve(totalServices);\r\n            }\r\n          } else {\r\n            boolProcessCount = false;\r\n            deferred.resolve(totalServices);\r\n          }\r\n          break;\r\n        case \"own\":\r\n          self.currCountSQ = self.ownServCountSQ;\r\n          self.currPagedSQ = self.ownServResultsSQ;\r\n          self.ownStr = '';\r\n          if (self.ownServices.length > 0) {\r\n            angular.forEach(self.ownServices, function (value, key) {\r\n              if (value === true) {\r\n                if (self.ownStr !== '') self.ownStr += \",\";\r\n                self.ownStr += key;\r\n              }\r\n            });\r\n            if (self.ownStr !== '') {\r\n              sqparams += \"&ownstr=\" + self.ownStr;\r\n              boolProcessCount = true;\r\n            } else {\r\n              boolProcessCount = false;\r\n              deferred.resolve(totalServices);\r\n            }\r\n          } else {\r\n            boolProcessCount = false;\r\n            deferred.resolve(totalServices);\r\n          }\r\n          break;\r\n        case 'unsub':\r\n          self.currCountSQ = self.unsubServCountSQ;\r\n          self.currPagedSQ = self.unsubServResultsSQ;\r\n          break;\r\n      }\r\n      if (boolProcessCount) {\r\n        var xmlmc = new XMLMCService.MethodCall();\r\n        xmlmc.addParam(\"storedQuery\", self.currCountSQ);\r\n        xmlmc.addParam(\"parameters\", sqparams);\r\n        xmlmc.invoke(\"data\", \"invokeStoredQuery\", {\r\n          onSuccess: function (params) {\r\n            if (params.rowData.row.cnt) {\r\n              totalServices = params.rowData.row.cnt;\r\n              deferred.resolve(totalServices);\r\n            } else {\r\n              deferred.reject(params);\r\n            }\r\n          },\r\n          onFailure: function (error) {\r\n            wssLogging.logger(error, \"ERROR\", \"ServicesService::getServiceCount\", false, false);\r\n            deferred.reject(error);\r\n          }\r\n        });\r\n      }\r\n      return deferred.promise;\r\n    };\r\n\r\n    self.getServices = function () {\r\n      var deferred = $q.defer();\r\n      //Work out columns.\r\n      var currPageNum = self.pageNo;\r\n      var serviceArray = [];\r\n      var sqparams = \"custid=\" + self.custDetails.keysearch;\r\n      sqparams += \"&orderby=\" + self.orderBy;\r\n      sqparams += \"&dynfilter=\" + encodeURIComponent(self.search);\r\n      sqparams += \"&cat=\" + self.category;\r\n\r\n      switch (self.listType) {\r\n        case 'fav':\r\n          if (self.favStr !== '') {\r\n            sqparams += \"&favstr=\" + self.favStr;\r\n          }\r\n          break;\r\n        case \"own\":\r\n          if (self.ownStr !== '') {\r\n            sqparams += \"&ownstr=\" + self.ownStr;\r\n          }\r\n          break;\r\n      }\r\n\r\n      if (self.totalServices > 0) {\r\n        var totalPages = Math.ceil(self.totalServices / self.rowsPerPage);\r\n        if (currPageNum > totalPages) {\r\n          currPageNum = totalPages;\r\n        }\r\n        sqparams += \"&records=\" + self.rowsPerPage;\r\n        sqparams += \"&start=\" + currPageNum;\r\n        sqparams += \"&table=config_itemi\";\r\n        //Now get a page worth of data\r\n        var xmlmc = new XMLMCService.MethodCall();\r\n        xmlmc.addParam(\"storedQuery\", self.currPagedSQ);\r\n        xmlmc.addParam(\"parameters\", sqparams);\r\n        xmlmc.invoke(\"data\", \"invokeStoredQuery\", {\r\n          onSuccess: function (params) {\r\n            if (params.rowData) {\r\n              if (Object.prototype.toString.call(params.rowData.row) === '[object Array]') {\r\n                var intArrayLength = params.rowData.row.length;\r\n                //obj is array\r\n                for (var i = 0; i < intArrayLength; i++) {\r\n                  serviceArray.push(params.rowData.row[i]);\r\n\r\n                }\r\n              } else {\r\n                serviceArray.push(params.rowData.row);\r\n              }\r\n              deferred.resolve(serviceArray);\r\n            } else {\r\n              deferred.resolve('No Requests Returned.');\r\n            }\r\n          },\r\n          onFailure: function (error) {\r\n            wssLogging.logger(error, \"ERROR\", \"ServicesService::getServices(\" + self.currPagedSQ + \")\", false, false);\r\n            deferred.reject(error);\r\n          }\r\n        });\r\n      } else {\r\n        deferred.resolve(serviceArray);\r\n      }\r\n      return deferred.promise;\r\n    };\r\n\r\n    self.getAllCustServices = function () {\r\n      var deferred = $q.defer();\r\n      //Work out columns.\r\n      var serviceArray = [];\r\n      var sqparams = \"custid=\" + self.custDetails.keysearch;\r\n      sqparams += \"&orderby=\" + self.orderBy;\r\n      sqparams += \"&cat=\" + self.category;\r\n\r\n      switch (self.listType) {\r\n        case 'fav':\r\n          if (self.favStr !== '') {\r\n            sqparams += \"&favstr=\" + self.favStr;\r\n          }\r\n          break;\r\n        case \"own\":\r\n          if (self.ownStr !== '') {\r\n            sqparams += \"&ownstr=\" + self.ownStr;\r\n          }\r\n          break;\r\n      }\r\n\r\n      if (self.totalServices > 0) {\r\n        sqparams += \"&table=config_itemi\";\r\n        //Now get a page worth of data\r\n        var xmlmc = new XMLMCService.MethodCall();\r\n        xmlmc.addParam(\"storedQuery\", self.custServResultsSQ);\r\n        xmlmc.addParam(\"parameters\", sqparams);\r\n        xmlmc.invoke(\"data\", \"invokeStoredQuery\", {\r\n          onSuccess: function (params) {\r\n            if (params.rowData) {\r\n              if (Object.prototype.toString.call(params.rowData.row) === '[object Array]') {\r\n                var intArrayLength = params.rowData.row.length;\r\n                //obj is array\r\n                for (var i = 0; i < intArrayLength; i++) {\r\n                  serviceArray.push(params.rowData.row[i]);\r\n\r\n                }\r\n              } else {\r\n                serviceArray.push(params.rowData.row);\r\n              }\r\n              deferred.resolve(serviceArray);\r\n            } else {\r\n              deferred.resolve('No Requests Returned.');\r\n            }\r\n          },\r\n          onFailure: function (error) {\r\n            wssLogging.logger(error, \"ERROR\", \"ServicesService::getServices(\" + self.currPagedSQ + \")\", false, false);\r\n            deferred.reject(error);\r\n          }\r\n        });\r\n      } else {\r\n        deferred.resolve(serviceArray);\r\n      }\r\n      return deferred.promise;\r\n    };\r\n\r\n    self.getSubscriptionRecord = function (subsId) {\r\n      var deferred = $q.defer();\r\n      var sqparams = \"subid=\" + subsId;\r\n      var objSubs = [];\r\n      var xmlmc = new XMLMCService.MethodCall();\r\n      xmlmc.addParam(\"storedQuery\", \"query/wss/services/services.subscription.get\");\r\n      xmlmc.addParam(\"parameters\", sqparams);\r\n      xmlmc.invoke(\"data\", \"invokeStoredQuery\", {\r\n        onSuccess: function (params) {\r\n          if (params.rowData) {\r\n            objSubs = params.rowData.row;\r\n          }\r\n          deferred.resolve(objSubs);\r\n        },\r\n        onFailure: function (error) {\r\n          wssLogging.logger(error, \"ERROR\", \"ServicesService::getSubscriptionRecord\", false, false);\r\n          deferred.resolve(objSubs);\r\n        }\r\n      });\r\n      return deferred.promise;\r\n    };\r\n\r\n    self.watchFilters = function () {\r\n      $rootScope.$watch(function () {\r\n        return self.pageNo;\r\n      }, function (newVal, oldVal) {\r\n        if (angular.isDefined(newVal) && angular.isDefined(oldVal) && newVal != oldVal) {\r\n          self.getPagedServices();\r\n        }\r\n      });\r\n      $rootScope.$watch(function () {\r\n        return self.search;\r\n      }, function (newVal, oldVal) {\r\n        if (angular.isDefined(newVal) && angular.isDefined(oldVal) && newVal != oldVal) {\r\n          self.getPagedServices();\r\n        }\r\n      });\r\n      $rootScope.$watch(function () {\r\n        return self.category;\r\n      }, function (newVal, oldVal) {\r\n        if (angular.isDefined(newVal) && angular.isDefined(oldVal) && newVal != oldVal) {\r\n          self.getPagedServices();\r\n        }\r\n      });\r\n    };\r\n\r\n    self.currCountSQ = self.servCountSQ;\r\n    self.currPagedSQ = self.servResultsSQ;\r\n    self.watchFilters();\r\n    return self;\r\n  }\r\n})();\r\n"]}