{"version":3,"sources":["../../../_itsm_default_v2_template/app/services/session.service.js"],"names":["angular","module","service","SWSessionService","$inject","$q","XMLMCService","$cookies","store","$rootScope","$state","wssHelpers","$http","wssLogging","self","bindSession","strSessionID","deferred","defer","xmlmc","MethodCall","addParam","invoke","onSuccess","set","sessionConfig","put","sessionLoggedOff","resolve","onFailure","error","status","reject","promise","login","ks","password","selfServiceInstance","addPasswordParam","params","oSessionConf","forEach","oVal","oKey","sessionId","connErrorBody","connErrorTitle","connErrorType","strErrorText","intErrorCode","code","indexOf","sendToast","logoff","normalLogoff","sessionEnded","removeSessionStorage","getCustomerDetails","idFld","custDetails","sqparams","rowData","row","getCustomerOrgDetails","fk_company_id","logger","org","orgDetails","record","getSelfServiceConfig","selfServiceConfig","sspConfig","intArrayLength","length","i","name","value","checkActiveSession","get","processSessionError","previousLogin","$broadcast","remove","now","Date","exp","getFullYear","getMonth","getDate","path","expires","sessionDetails","numAuths","go","getSSPSetup","url","method","port","headers","then","returnedConfig","data","serverUrl","serverAddress","oSSPConfig","ssoEnabled","setBranding","requestResetCustomerPassword","messageTitle","messageBody","resetCustomer_Password","si","ti","pwd","encodedPwd","encodeBase64","selfserviceId","userId","tokenId","goodResponse"],"mappings":"AAAA,CAAC,YAAW;AACR;;AACAA,UACGC,MADH,CACU,eADV,EAEGC,OAFH,CAEW,kBAFX,EAE+BC,gBAF/B;;AAIAA,mBAAiBC,OAAjB,GAAyB,CAAC,IAAD,EAAM,cAAN,EAAqB,UAArB,EAAgC,OAAhC,EAAwC,YAAxC,EAAqD,QAArD,EAA8D,YAA9D,EAA2E,OAA3E,EAAmF,YAAnF,CAAzB;;AAEA,WAASD,gBAAT,CAA0BE,EAA1B,EAA8BC,YAA9B,EAA4CC,QAA5C,EAAsDC,KAAtD,EAA6DC,UAA7D,EAAyEC,MAAzE,EAAiFC,UAAjF,EAA6FC,KAA7F,EAAoGC,UAApG,EAAgH;AAC9G,QAAIC,OAAO;AACT,2BAAqB,EADZ;AAET,qBAAe,EAFN;AAGT,oBAAc,KAHL;AAIT,sBAAgB,KAJP;AAKT,sBAAgB,KALP;AAMT,0BAAoB,KANX;AAOT,uBAAiB;AAPR,KAAX;;AAUAA,SAAKC,WAAL,GAAmB,UAASC,YAAT,EAAuB;AACxC,UAAIC,WAAWZ,GAAGa,KAAH,EAAf;AACA,UAAIC,QAAQ,IAAIb,aAAac,UAAjB,EAAZ;AACAD,YAAME,QAAN,CAAe,WAAf,EAA4BL,YAA5B;AACAG,YAAMG,MAAN,CAAa,SAAb,EAAwB,aAAxB,EAAuC;AACrCC,mBAAW,YAAU;AACnBf,gBAAMgB,GAAN,CAAU,eAAV,EAA2BV,KAAKW,aAAhC;AACAlB,mBAASmB,GAAT,CAAa,aAAb,EAA4BV,YAA5B;AACAF,eAAKa,gBAAL,GAAwB,KAAxB;AACAV,mBAASW,OAAT,CAAiB,EAAjB;AACD,SANoC;AAOrCC,mBAAW,UAASC,KAAT,EAAgBC,MAAhB,EAAuB;AAChCd,mBAASe,MAAT,CAAgBF,KAAhB;AACD;AAToC,OAAvC;AAWA,aAAOb,SAASgB,OAAhB;AACD,KAhBD;;AAkBAnB,SAAKoB,KAAL,GAAa,UAASC,EAAT,EAAaC,QAAb,EAAuB;AAClC,UAAInB,WAAWZ,GAAGa,KAAH,EAAf;AACA,UAAIC,QAAQ,IAAIb,aAAac,UAAjB,EAAZ;AACAD,YAAME,QAAN,CAAe,qBAAf,EAAsCP,KAAKuB,mBAA3C;AACAlB,YAAME,QAAN,CAAe,YAAf,EAA6Bc,EAA7B;AACAhB,YAAMmB,gBAAN,CAAuB,UAAvB,EAAmCF,QAAnC;AACAjB,YAAMG,MAAN,CAAa,SAAb,EAAwB,kBAAxB,EAA4C;AACxCC,mBAAW,UAASgB,MAAT,EAAgB;AACzB,cAAIC,eAAe,EAAnB;AACAxC,kBAAQyC,OAAR,CAAgBF,MAAhB,EAAwB,UAASG,IAAT,EAAeC,IAAf,EAAoB;AAC1C,gBAAGA,SAAS,WAAZ,EAAwB;AACtBH,2BAAaG,IAAb,IAAqBD,IAArB;AACD;AACF,WAJD;AAKAlC,gBAAMgB,GAAN,CAAU,eAAV,EAA2BgB,YAA3B;AACA,cAAGD,OAAOK,SAAV,EAAqBrC,SAASmB,GAAT,CAAa,aAAb,EAA4Ba,OAAOK,SAAnC;AACrB9B,eAAKa,gBAAL,GAAwB,KAAxB;AACAV,mBAASW,OAAT,CAAiBW,MAAjB;AACD,SAZuC;AAaxCV,mBAAW,UAASC,KAAT,EAAgBC,MAAhB,EAAuB;AAChC,cAAIc,gBAAgB,EAApB;AACA,cAAIC,iBAAiB,EAArB;AACA,cAAIC,gBAAgB,OAApB;AACA,cAAIC,eAAejB,OAAOD,KAA1B;AACA,cAAImB,eAAelB,OAAOmB,IAA1B;;AAEA,cAAGF,gBAAgB,0BAAnB,EAA8C;AAC5CF,6BAAiB,uBAAjB;AACAD,4BAAgB,MAAIV,EAAJ,GAAO,yFAAvB;AACD,WAHD,MAGO,IAAIa,iBAAiB,oCAAjB,IAAyDA,iBAAiB,uBAA9E,EAAuG;AAC5GF,6BAAiB,uBAAjB;AACAD,4BAAgB,oEAAhB;AACD,WAHM,MAGA,IAAIG,aAAaG,OAAb,CAAqB,kDAArB,MAA6E,CAAC,CAAlF,EAAqF;AAC1FL,6BAAiB,uBAAjB;AACAD,4BAAgB,4FAAhB;AACD,WAHM,MAGA,IAAIG,aAAaG,OAAb,CAAqB,sCAArB,MAAiE,CAAC,CAAtE,EAAyE;AACnFL,6BAAiB,uBAAjB;AACAD,4BAAgB,6JAAhB;AACA,WAHU,MAGH,IAAIG,aAAaG,OAAb,CAAqB,iCAArB,MAA4D,CAAC,CAAjE,EAAoE;AAC3EL,6BAAiB,uBAAjB;AACAD,4BAAgB,sIAAhB;AACA,WAHO,MAGD,IAAIG,aAAaG,OAAb,CAAqB,8BAArB,MAAyD,CAAC,CAA9D,EAAiE;AACvEL,6BAAiB,uBAAjB;AACAD,4BAAgB,2FAAhB;AACA,WAHM,MAGA;AACDA,4BAAgB,0JAAhB;AACAA,6BAAiB,8BAA4BI,YAA5B,GAAyC,KAAzC,GAA+CD,YAA/C,GAA4D,WAA7E;AACAF,6BAAiB,mBAAjB;AACD;AACDjC,qBAAWuC,SAAX,CAAqBL,aAArB,EAAoCF,aAApC,EAAmDC,cAAnD;AACA7B,mBAASe,MAAT,CAAgBF,KAAhB;AACD;AA7CuC,OAA5C;AA+CA,aAAOb,SAASgB,OAAhB;AACD,KAtDD;;AAwDAnB,SAAKuC,MAAL,GAAc,YAAW;AACvB,UAAIpC,WAAWZ,GAAGa,KAAH,EAAf;AACA,UAAIC,QAAQ,IAAIb,aAAac,UAAjB,EAAZ;AACAD,YAAMG,MAAN,CAAa,SAAb,EAAwB,mBAAxB,EAA6C;AACzCC,mBAAW,UAASgB,MAAT,EAAgB;AACzB;AACAzB,eAAKwC,YAAL,GAAoB,IAApB;AACAxC,eAAKyC,YAAL,GAAoB,KAApB;AACAzC,eAAKa,gBAAL,GAAwB,IAAxB;AACAb,eAAK0C,oBAAL;AACAvC,mBAASW,OAAT,CAAiBW,MAAjB;AACD,SARwC;AASzCV,mBAAW,UAASC,KAAT,EAAe;AACxBhB,eAAKyC,YAAL,GAAoB,IAApB;AACAzC,eAAK0C,oBAAL;AACAvC,mBAASe,MAAT,CAAgBF,KAAhB;AACD;AAbwC,OAA7C;AAeA,aAAOb,SAASgB,OAAhB;AACD,KAnBD;;AAqBAnB,SAAK2C,kBAAL,GAA0B,UAAStB,EAAT,EAAauB,KAAb,EAAoB;AAC5C5C,WAAK6C,WAAL,GAAmB,EAAnB;AACA,UAAI1C,WAAWZ,GAAGa,KAAH,EAAf;AACA,UAAIC,QAAQ,IAAIb,aAAac,UAAjB,EAAZ;AACA,UAAIwC,WAAW,QAAMzB,EAArB;AACAyB,kBAAY,gBAAcF,KAA1B;AACAvC,YAAME,QAAN,CAAe,aAAf,EAA8B,uCAA9B;AACAF,YAAME,QAAN,CAAe,YAAf,EAA6BuC,QAA7B;AACAzC,YAAMG,MAAN,CAAa,MAAb,EAAqB,mBAArB,EAA0C;AACtCC,mBAAW,UAASgB,MAAT,EAAgB;AACzB,cAAGA,OAAOsB,OAAV,EAAmB;AACjB/C,iBAAK6C,WAAL,GAAmBpB,OAAOsB,OAAP,CAAeC,GAAlC;AACAtD,kBAAMgB,GAAN,CAAU,aAAV,EAAyBV,KAAK6C,WAA9B;AACA7C,iBAAKiD,qBAAL,CAA2BjD,KAAK6C,WAAL,CAAiBK,aAA5C;AACA/C,qBAASW,OAAT,CAAiBd,KAAK6C,WAAtB;AACD,WALD,MAKO;AACL1C,qBAASe,MAAT,CAAgB,yCAAhB;AACD;AACF,SAVqC;AAWtCH,mBAAW,UAASC,KAAT,EAAe;AACxBjB,qBAAWoD,MAAX,CAAkBnC,KAAlB,EAAyB,OAAzB,EAAkC,sCAAlC,EAA0E,KAA1E,EAAiF,KAAjF;AACAb,mBAASe,MAAT,CAAgBF,KAAhB;AACD;AAdqC,OAA1C;AAgBA,aAAOb,SAASgB,OAAhB;AACD,KAzBD;;AA2BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAnB,SAAKiD,qBAAL,GAA6B,UAASG,GAAT,EAAc;AACzCpD,WAAKqD,UAAL,GAAkB,EAAlB;AACA,UAAIhD,QAAQ,IAAIb,aAAac,UAAjB,EAAZ;AACAD,YAAME,QAAN,CAAe,OAAf,EAAwB,SAAxB;AACAF,YAAME,QAAN,CAAe,UAAf,EAA2B6C,GAA3B;AACA/C,YAAMG,MAAN,CAAa,MAAb,EAAqB,WAArB,EAAkC;AAC9BC,mBAAW,UAASgB,MAAT,EAAgB;AACzB,cAAGA,OAAO6B,MAAV,EAAkB;AAChBtD,iBAAKqD,UAAL,GAAkB5B,OAAO6B,MAAzB;AACA5D,kBAAMgB,GAAN,CAAU,YAAV,EAAwBe,OAAO6B,MAA/B;AACD;AACF,SAN6B;AAO9BvC,mBAAW,UAASC,KAAT,EAAe;AACxBjB,qBAAWoD,MAAX,CAAkBnC,KAAlB,EAAyB,OAAzB,EAAkC,yCAAlC,EAA6E,KAA7E,EAAoF,KAApF;AACD;AAT6B,OAAlC;AAWD,KAhBD;;AAkBAhB,SAAKuD,oBAAL,GAA4B,UAASlC,EAAT,EAAa;AACvCrB,WAAKwD,iBAAL,GAAyB,EAAzB;AACA,UAAIrD,WAAWZ,GAAGa,KAAH,EAAf;AACA,UAAIC,QAAQ,IAAIb,aAAac,UAAjB,EAAZ;AACA,UAAIwC,WAAW,QAAMzB,EAArB;AACAyB,kBAAY,WAAS9C,KAAKyD,SAAL,CAAelC,mBAApC;AACAlB,YAAME,QAAN,CAAe,aAAf,EAA8B,iCAA9B;AACAF,YAAME,QAAN,CAAe,YAAf,EAA6BuC,QAA7B;AACAzC,YAAMG,MAAN,CAAa,MAAb,EAAqB,mBAArB,EAA0C;AACtCC,mBAAW,UAASgB,MAAT,EAAgB;AACzB,cAAGA,OAAOsB,OAAV,EAAmB;AACjB,gBAAIW,iBAAiBjC,OAAOsB,OAAP,CAAeC,GAAf,CAAmBW,MAAxC;AACA;AACA,iBAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIF,cAApB,EAAoCE,GAApC,EAAyC;AACvC5D,mBAAKwD,iBAAL,CAAuB/B,OAAOsB,OAAP,CAAeC,GAAf,CAAmBY,CAAnB,EAAsBC,IAA7C,IAAqDpC,OAAOsB,OAAP,CAAeC,GAAf,CAAmBY,CAAnB,EAAsBE,KAA3E;AACD;AACDpE,kBAAMgB,GAAN,CAAU,WAAV,EAAuBV,KAAKwD,iBAA5B;AACArD,qBAASW,OAAT,CAAiBd,KAAKwD,iBAAtB;AACD,WARD,MAQO;AACLrD,qBAASe,MAAT,CAAgB,kDAAhB;AACD;AACF,SAbqC;AActCH,mBAAW,UAASC,KAAT,EAAe;AACxBjB,qBAAWoD,MAAX,CAAkBnC,KAAlB,EAAyB,OAAzB,EAAkC,wCAAlC,EAA4E,KAA5E,EAAmF,KAAnF;AACAb,mBAASe,MAAT,CAAgBF,KAAhB;AACD;AAjBqC,OAA1C;AAmBA,aAAOb,SAASgB,OAAhB;AACD,KA5BD;;AA8BAnB,SAAK+D,kBAAL,GAA0B,UAASjC,SAAT,EAAoB;AAC5C,UAAI3B,WAAWZ,GAAGa,KAAH,EAAf;AACA,UAAG,CAACX,SAASuE,GAAT,CAAa,aAAb,CAAJ,EAAgC;AAC9B;AACAhE,aAAKyC,YAAL,GAAoB,IAApB;AACAzC,aAAKiE,mBAAL;AACD,OAJD,MAIO;AACL,YAAI5D,QAAQ,IAAIb,aAAac,UAAjB,EAAZ;AACAD,cAAME,QAAN,CAAe,WAAf,EAA4Bd,SAASuE,GAAT,CAAa,aAAb,CAA5B;AACA3D,cAAMG,MAAN,CAAa,SAAb,EAAuB,gBAAvB,EAAyC;AACvCC,qBAAW,UAASgB,MAAT,EAAiB;AAC1B;AACAtB,qBAASW,OAAT,CAAiB,IAAjB;AACD,WAJsC;AAKvCC,qBAAW,UAASC,KAAT,EAAe;AACxB;AACAhB,iBAAKyC,YAAL,GAAoB,IAApB;AACAzC,iBAAKiE,mBAAL;AACA9D,qBAASe,MAAT,CAAgB,KAAhB;AACD;AAVsC,SAAzC;AAYD;AACD,aAAOf,SAASgB,OAAhB;AACD,KAvBD;;AAyBAnB,SAAKiE,mBAAL,GAA2B,YAAW;AACpCjE,WAAKwC,YAAL,GAAoB,KAApB;AACAzC,iBAAWuC,SAAX,CAAqB,OAArB,EAA8B,4DAA9B,EAA4F,gBAA5F;AACNtC,WAAKkE,aAAL,GAAqB,IAArB;AACM;AACAlE,WAAK0C,oBAAL;AACD,KAND;;AAQA1C,SAAK0C,oBAAL,GAA4B,YAAU;AACpC;AACA/C,iBAAWwE,UAAX,CAAsB,QAAtB;AACA1E,eAAS2E,MAAT,CAAgB,aAAhB;AACA3E,eAAS2E,MAAT,CAAgB,iBAAhB;AACA,UAAIC,MAAM,IAAIC,IAAJ,EAAV;AAAA,UACEC,MAAM,IAAID,IAAJ,CAASD,IAAIG,WAAJ,EAAT,EAA4BH,IAAII,QAAJ,EAA5B,EAA4CJ,IAAIK,OAAJ,KAAgB,CAA5D,CADR;AAEAjF,eAASmB,GAAT,CAAa,iBAAb,EAA+B,EAA/B,EAAkC;AAChC+D,cAAM,KAD0B;AAEhCC,iBAASL;AAFuB,OAAlC;;AAKA1E,iBAAWgD,WAAX,GAAyB,EAAzB;AACAhD,iBAAWgF,cAAX,GAA4B,EAA5B;AACA7E,WAAK8E,QAAL,GAAgB,CAAhB;AACA9E,WAAK6C,WAAL,GAAmB,EAAnB;AACA7C,WAAKyD,SAAL,GAAiB,EAAjB;AACA/D,YAAM0E,MAAN,CAAa,eAAb;AACA1E,YAAM0E,MAAN,CAAa,aAAb;AACA1E,YAAM0E,MAAN,CAAa,YAAb;AACA1E,YAAM0E,MAAN,CAAa,WAAb;AACA;AACAxE,aAAOmF,EAAP,CAAU,OAAV;AACD,KAvBD;;AAyBA/E,SAAKgF,WAAL,GAAmB,YAAU;AAC3B,UAAI7E,WAAWZ,GAAGa,KAAH,EAAf;AACAJ,WAAKyD,SAAL,GAAiB,EAAjB;AACA;AACA3D,YAAM;AACJmF,aAAK,4BADD;AAEJC,gBAAQ,MAFJ;AAGJC,cAAM,EAHF;AAIJC,iBAAS;AACP,2BAAgB,UADT;AAEP,oBAAU,WAFH;AAGP,6BAAkB,OAHX;AAIP,0BAAe;AAJR;AAJL,OAAN,EAUGC,IAVH,CAUQ,UAASC,cAAT,EAAyB;AAC/BtF,aAAKyD,SAAL,GAAiB6B,eAAeC,IAAhC;AACA/F,qBAAagG,SAAb,GAAyBxF,KAAKyD,SAAL,CAAegC,aAAxC;AACA,YAAIC,aAAa,EAAjB;AACAxG,gBAAQyC,OAAR,CAAgB3B,KAAKyD,SAArB,EAAgC,UAAS7B,IAAT,EAAeC,IAAf,EAAoB;AAClD6D,qBAAW7D,IAAX,IAAmBD,IAAnB;AACD,SAFD;AAGAlC,cAAMgB,GAAN,CAAU,gBAAV,EAA4BgF,UAA5B;AACA1F,aAAK2F,UAAL,GAAkB3F,KAAKyD,SAAL,CAAekC,UAAjC;AACA3F,aAAKuB,mBAAL,GAA2BvB,KAAKyD,SAAL,CAAelC,mBAA1C;AACA1B,mBAAW+F,WAAX;AACAzF,iBAASW,OAAT,CAAiBd,KAAKyD,SAAtB;AACD,OAtBD,EAsBG,UAASzC,KAAT,EAAe;AAChBb,iBAASe,MAAT,CAAgBF,KAAhB;AACD,OAxBD;AAyBA,aAAOb,SAASgB,OAAhB;AACD,KA9BD;;AAgCAnB,SAAK6F,4BAAL,GAAoC,UAASxE,EAAT,EAAa;AAC/C,UAAIlB,WAAWZ,GAAGa,KAAH,EAAf;AACA,UAAIC,QAAQ,IAAIb,aAAac,UAAjB,EAAZ;AACAD,YAAME,QAAN,CAAe,eAAf,EAAgCP,KAAKuB,mBAArC;AACAlB,YAAME,QAAN,CAAe,YAAf,EAA6Bc,EAA7B;AACAhB,YAAMG,MAAN,CAAa,aAAb,EAA4B,sBAA5B,EAAoD;AAClDC,mBAAW,UAASgB,MAAT,EAAgB;AACzB,cAAIqE,eAAe,8BAAnB;AACA,cAAIC,cAAc,qGAAlB;AACAhG,qBAAWuC,SAAX,CAAqB,SAArB,EAAgCyD,WAAhC,EAA6CD,YAA7C;AACA3F,mBAASW,OAAT,CAAiBW,MAAjB;AACC,SAN+C;AAOlDV,mBAAW,UAASC,KAAT,EAAe;AACxB,cAAIiB,gBAAgB,OAApB;AACA,cAAIF,gBAAgB,4DAApB;AACAA,2BAAgB,gDAAhB;AACA,cAAIC,iBAAiB,+BAArB;AACAjC,qBAAWuC,SAAX,CAAqBL,aAArB,EAAoCF,aAApC,EAAmDC,cAAnD;AACA7B,mBAASe,MAAT,CAAgBF,KAAhB;AACD;AAdiD,OAApD;AAgBA,aAAOb,SAASgB,OAAhB;AACD,KAtBD;;AAyBAnB,SAAKgG,sBAAL,GAA8B,UAASC,EAAT,EAAY5E,EAAZ,EAAe6E,EAAf,EAAkBC,GAAlB,EAAsB;AAClD,UAAIC,aAAa,IAAI5G,aAAac,UAAjB,GAA8B+F,YAA9B,CAA2CF,GAA3C,CAAjB;AACArG,YAAM;AACJmF,aAAK,uBADD;AAEJC,gBAAQ,MAFJ;AAGJC,cAAM,EAHF;AAIJI,cAAM;AACAe,yBAAeL,EADf;AAEAM,kBAAQlF,EAFR;AAGAmF,mBAASN,EAHT;AAIA5E,oBAAU8E;AACV;AALA,SAJF;AAWJhB,iBAAS;AACC,2BAAgB,UADjB;AAEC,oBAAU,WAFX;AAGC,6BAAkB,OAHnB;AAIC,0BAAe;AAJhB;AAXL,OAAN,EAiBKC,IAjBL,CAiBU,UAASoB,YAAT,EAAuB;AAC7B;AACA,YAAIA,aAAalB,IAAb,IAAmB,SAAvB,EAAiC;AAC/B,cAAItD,gBAAgB,OAApB;AACA,cAAID,iBAAiB,uBAArB;AACA,cAAID,gBAAgB,uDAApB;AACAA,2BAAgB,6CAAhB;AACAhC,qBAAWuC,SAAX,CAAqBL,aAArB,EAAoCF,aAApC,EAAmDC,cAAnD;AACC;AACD;AAPF,aAQI;AACA,gBAAI8D,eAAe,yBAAnB;AACA,gBAAIC,cAAc,yCAAlB;AACAhG,uBAAWuC,SAAX,CAAqByD,WAArB,EAAkCD,YAAlC;AACC;AACJ,OAhCL,EAiCE,UAAS9E,KAAT,EAAe;AACb,YAAIe,gBAAgB,kDAApB;AACA,YAAIC,iBAAiB,+BAArB;AACA,YAAIC,gBAAgB,OAApB;AACAlC,mBAAWuC,SAAX,CAAqBL,aAArB,EAAoCF,aAApC,EAAmDC,cAAnD;AACA,OAtCJ;AAuCD,KAzCD;;AA2CA,WAAOhC,IAAP;AACD;AACJ,CA5WD","file":"session.service.js","sourcesContent":["(function (){\r\n    'use strict';\r\n    angular\r\n      .module('swSelfService')\r\n      .service('SWSessionService', SWSessionService);\r\n\r\n    SWSessionService.$inject=['$q','XMLMCService','$cookies','store','$rootScope','$state','wssHelpers','$http','wssLogging'];\r\n\r\n    function SWSessionService($q, XMLMCService, $cookies, store, $rootScope, $state, wssHelpers, $http, wssLogging) {\r\n      var self = {\r\n        'selfServiceConfig': {},\r\n        'custDetails': [],\r\n        'ssoEnabled': false,\r\n        'normalLogoff': false,\r\n        'sessionEnded': false,\r\n        'sessionLoggedOff': false,\r\n        'previousLogin': false\r\n      };\r\n\r\n      self.bindSession = function(strSessionID) {\r\n        var deferred = $q.defer();\r\n        var xmlmc = new XMLMCService.MethodCall();\r\n        xmlmc.addParam(\"sessionId\", strSessionID);\r\n        xmlmc.invoke(\"session\", \"bindSession\", {\r\n          onSuccess: function(){\r\n            store.set(\"sessionConfig\", self.sessionConfig);\r\n            $cookies.put(\"swSessionID\", strSessionID);\r\n            self.sessionLoggedOff = false;\r\n            deferred.resolve('');\r\n          },\r\n          onFailure: function(error, status){\r\n            deferred.reject(error);\r\n          }\r\n        });\r\n        return deferred.promise;\r\n      };\r\n\r\n      self.login = function(ks, password) {\r\n        var deferred = $q.defer();\r\n        var xmlmc = new XMLMCService.MethodCall();\r\n        xmlmc.addParam(\"selfServiceInstance\", self.selfServiceInstance);\r\n        xmlmc.addParam(\"customerId\", ks);\r\n        xmlmc.addPasswordParam(\"password\", password);\r\n        xmlmc.invoke(\"session\", \"selfServiceLogon\", {\r\n            onSuccess: function(params){\r\n              var oSessionConf = {};\r\n              angular.forEach(params, function(oVal, oKey){\r\n                if(oKey !== 'sessionId'){\r\n                  oSessionConf[oKey] = oVal;\r\n                }\r\n              });\r\n              store.set(\"sessionConfig\", oSessionConf);\r\n              if(params.sessionId) $cookies.put(\"swSessionID\", params.sessionId);\r\n              self.sessionLoggedOff = false;\r\n              deferred.resolve(params);\r\n            },\r\n            onFailure: function(error, status){\r\n              var connErrorBody = \"\";\r\n              var connErrorTitle = \"\";\r\n              var connErrorType = \"error\";\r\n              var strErrorText = status.error;\r\n              var intErrorCode = status.code;\r\n\r\n              if(strErrorText == \"Customer not registered.\"){\r\n                connErrorTitle = 'Authentication Error!';\r\n                connErrorBody = '['+ks+'] is not registered on this system. Please contact your Service Desk to request access.';\r\n              } else if (strErrorText === \"-106 Invalid customer credentials.\" || strErrorText === \"Unable to login user.\") {\r\n                connErrorTitle = 'Authentication Error!';\r\n                connErrorBody = 'The credentials you have provided are incorrect. Please try again.';\r\n              } else if (strErrorText.indexOf(\"You do not have the rights to access this system\") !== -1) {\r\n                connErrorTitle = 'Authentication Error!';\r\n                connErrorBody = 'You do not have access to this system. Please contact your Service Desk to request access.';\r\n              } else if (strErrorText.indexOf(\"The maximum number of login attempts\") !== -1) {\r\n      \t\t\t\t\tconnErrorTitle = 'Authentication Error!';\r\n      \t\t\t\t\tconnErrorBody = 'Your account has been locked due to the maximum number of failed login attempts being achieved. Please contact your Service Desk to have this lock removed.';\r\n      \t\t\t\t}  else if (strErrorText.indexOf(\"This account has been suspended\") !== -1) {\r\n      \t\t\t\t\tconnErrorTitle = 'Authentication Error!';\r\n      \t\t\t\t\tconnErrorBody = 'Your account has been locked for a set period of time. Please try again later, or contact your Service Desk for further information.';\r\n      \t\t\t\t} else if (strErrorText.indexOf(\"This account has been locked\") !== -1) {\r\n      \t\t\t\t\tconnErrorTitle = 'Authentication Error!';\r\n      \t\t\t\t\tconnErrorBody = 'Your account has been locked. Please contact your Service Desk to have this lock removed.';\r\n      \t\t\t\t} else {\r\n                connErrorBody = \"We've been unable to create your Supportworks session. Please try again, and if this fails then contact your Service Desk, quoting the following error: \";\r\n                connErrorBody += \"<br/><br/><strong>Error [\"+intErrorCode+\"]: \"+strErrorText+\"</strong>\";\r\n                connErrorTitle = 'Connection Error!';\r\n              }\r\n              wssLogging.sendToast(connErrorType, connErrorBody, connErrorTitle);\r\n              deferred.reject(error);\r\n            }\r\n        });\r\n        return deferred.promise;\r\n      };\r\n\r\n      self.logoff = function() {\r\n        var deferred = $q.defer();\r\n        var xmlmc = new XMLMCService.MethodCall();\r\n        xmlmc.invoke(\"session\", \"selfServiceLogoff\", {\r\n            onSuccess: function(params){\r\n              //Remove cookies & localStorage\r\n              self.normalLogoff = true;\r\n              self.sessionEnded = false;\r\n              self.sessionLoggedOff = true;\r\n              self.removeSessionStorage();\r\n              deferred.resolve(params);\r\n            },\r\n            onFailure: function(error){\r\n              self.sessionEnded = true;\r\n              self.removeSessionStorage();\r\n              deferred.reject(error);\r\n            }\r\n        });\r\n        return deferred.promise;\r\n      };\r\n\r\n      self.getCustomerDetails = function(ks, idFld) {\r\n        self.custDetails = [];\r\n        var deferred = $q.defer();\r\n        var xmlmc = new XMLMCService.MethodCall();\r\n        var sqparams = \"ks=\"+ks;\r\n        sqparams += \"&custidfld=\"+idFld;\r\n        xmlmc.addParam(\"storedQuery\", \"query/wss/get_customer_details.select\");\r\n        xmlmc.addParam(\"parameters\", sqparams);\r\n        xmlmc.invoke(\"data\", \"invokeStoredQuery\", {\r\n            onSuccess: function(params){\r\n              if(params.rowData) {\r\n                self.custDetails = params.rowData.row;\r\n                store.set(\"custDetails\", self.custDetails);\r\n                self.getCustomerOrgDetails(self.custDetails.fk_company_id);\r\n                deferred.resolve(self.custDetails);\r\n              } else {\r\n                deferred.reject('Customer Details could not be returned.');\r\n              }\r\n            },\r\n            onFailure: function(error){\r\n              wssLogging.logger(error, \"ERROR\", \"SWSessionService::getCustomerDetails\", false, false);\r\n              deferred.reject(error);\r\n            }\r\n        });\r\n        return deferred.promise;\r\n      };\r\n\r\n      // self.getCustFaveServices = (ks, idFld) => {\r\n      //   const deferred = $q.defer();\r\n      //   const xmlmc = new XMLMCService.MethodCall();\r\n      //   const sqparams = `ks=${ks}&custidfld=${idFld}`;\r\n      //   xmlmc.addParam(\"storedQuery\", \"query/wss/get_customer_details.select\");\r\n      //   xmlmc.addParam(\"parameters\", sqparams);\r\n      //   xmlmc.invoke(\"data\", \"invokeStoredQuery\", {\r\n      //     onSuccess: params => {\r\n      //       if(params.rowData) {\r\n      //         self.custDetails.favorites = params.rowData.row;\r\n      //       }\r\n      //     }\r\n      //   })\r\n      // }\r\n\r\n      self.getCustomerOrgDetails = function(org) {\r\n        self.orgDetails = [];\r\n        var xmlmc = new XMLMCService.MethodCall();\r\n        xmlmc.addParam(\"table\", \"company\");\r\n        xmlmc.addParam(\"keyValue\", org);\r\n        xmlmc.invoke(\"data\", \"getRecord\", {\r\n            onSuccess: function(params){\r\n              if(params.record) {\r\n                self.orgDetails = params.record;\r\n                store.set(\"orgDetails\", params.record);\r\n              }\r\n            },\r\n            onFailure: function(error){\r\n              wssLogging.logger(error, \"ERROR\", \"SWSessionService::getCustomerOrgDetails\", false, false);\r\n            }\r\n        });\r\n      };\r\n\r\n      self.getSelfServiceConfig = function(ks) {\r\n        self.selfServiceConfig = {};\r\n        var deferred = $q.defer();\r\n        var xmlmc = new XMLMCService.MethodCall();\r\n        var sqparams = \"ks=\"+ks;\r\n        sqparams += \"&ssid=\"+self.sspConfig.selfServiceInstance;\r\n        xmlmc.addParam(\"storedQuery\", \"query/wss/get_wss_config.select\");\r\n        xmlmc.addParam(\"parameters\", sqparams);\r\n        xmlmc.invoke(\"data\", \"invokeStoredQuery\", {\r\n            onSuccess: function(params){\r\n              if(params.rowData) {\r\n                var intArrayLength = params.rowData.row.length;\r\n                //obj is array\r\n                for (var i = 0; i < intArrayLength; i++) {\r\n                  self.selfServiceConfig[params.rowData.row[i].name] = params.rowData.row[i].value;\r\n                }\r\n                store.set('wssConfig', self.selfServiceConfig);\r\n                deferred.resolve(self.selfServiceConfig);\r\n              } else {\r\n                deferred.reject('SelfService Configuration could not be returned.');\r\n              }\r\n            },\r\n            onFailure: function(error){\r\n              wssLogging.logger(error, \"ERROR\", \"SWSessionService::getSelfServiceConfig\", false, false);\r\n              deferred.reject(error);\r\n            }\r\n        });\r\n        return deferred.promise;\r\n      };\r\n\r\n      self.checkActiveSession = function(sessionId) {\r\n        var deferred = $q.defer();\r\n        if(!$cookies.get('swSessionID')){\r\n          //Haven't got a cookie - a clean up and go to login\r\n          self.sessionEnded = true;\r\n          self.processSessionError();\r\n        } else {\r\n          var xmlmc = new XMLMCService.MethodCall();\r\n          xmlmc.addParam(\"sessionId\", $cookies.get('swSessionID'));\r\n          xmlmc.invoke(\"session\",\"isSessionValid\", {\r\n            onSuccess: function(params) {\r\n              //We have a valid session\r\n              deferred.resolve(true);\r\n            },\r\n            onFailure: function(error){\r\n              //We don't have an active session, clean up and go to login\r\n              self.sessionEnded = true;\r\n              self.processSessionError();\r\n              deferred.reject(false);\r\n            }\r\n          });\r\n        }\r\n        return deferred.promise;\r\n      };\r\n\r\n      self.processSessionError = function (){\r\n        self.normalLogoff = false;\r\n        wssLogging.sendToast('error', 'Your session appears to have expired. Please log on again.', 'Session Error!');\r\n\t\tself.previousLogin = true;\r\n        //Remove session storage (local & cookies)\r\n        self.removeSessionStorage();\r\n      };\r\n\r\n      self.removeSessionStorage = function(){\r\n        //Broadcast a logout to all controllers/services to allow app data cleansing\r\n        $rootScope.$broadcast('logout');\r\n        $cookies.remove(\"swSessionID\");\r\n        $cookies.remove(\"ESPSessionState\");\r\n        var now = new Date(),\r\n          exp = new Date(now.getFullYear(), now.getMonth(), now.getDate() - 1);\r\n        $cookies.put('ESPSessionState','',{\r\n          path: '/sw',\r\n          expires: exp\r\n        });\r\n\r\n        wssHelpers.custDetails = [];\r\n        wssHelpers.sessionDetails = [];\r\n        self.numAuths = 0;\r\n        self.custDetails = [];\r\n        self.sspConfig = [];\r\n        store.remove(\"sessionConfig\");\r\n        store.remove(\"custDetails\");\r\n        store.remove(\"orgDetails\");\r\n        store.remove(\"wssConfig\");\r\n        //Change state back to login\r\n        $state.go('login');\r\n      };\r\n\r\n      self.getSSPSetup = function(){\r\n        var deferred = $q.defer();\r\n        self.sspConfig = [];\r\n        //Get WSSP Config from server\r\n        $http({\r\n          url: 'config/retrieve_config.php',\r\n          method: 'POST',\r\n          port: 80,\r\n          headers: {\r\n            'Cache-Control':'no-cache',\r\n            'Accept': 'text/json',\r\n            'Accept-Language':'en-GB',\r\n            'Content-Type':'text/xmlmc; charset=UTF-8'\r\n          }\r\n        }).then(function(returnedConfig) {\r\n          self.sspConfig = returnedConfig.data;\r\n          XMLMCService.serverUrl = self.sspConfig.serverAddress;\r\n          var oSSPConfig = {};\r\n          angular.forEach(self.sspConfig, function(oVal, oKey){\r\n            oSSPConfig[oKey] = oVal;\r\n          });\r\n          store.set(\"instanceConfig\", oSSPConfig);\r\n          self.ssoEnabled = self.sspConfig.ssoEnabled;\r\n          self.selfServiceInstance = self.sspConfig.selfServiceInstance;\r\n          wssHelpers.setBranding();\r\n          deferred.resolve(self.sspConfig);\r\n        }, function(error){\r\n          deferred.reject(error);\r\n        });\r\n        return deferred.promise;\r\n      };\r\n\r\n      self.requestResetCustomerPassword = function(ks) {\r\n        var deferred = $q.defer();\r\n        var xmlmc = new XMLMCService.MethodCall();\r\n        xmlmc.addParam(\"selfServiceId\", self.selfServiceInstance);\r\n        xmlmc.addParam(\"customerId\", ks);\r\n        xmlmc.invoke(\"selfservice\", \"requestPasswordReset\", {\r\n          onSuccess: function(params){\r\n            var messageTitle = \"Password Reset Request Done!\";\r\n            var messageBody = \"Please check your email for your password reset link, and follow the instructions contained within.\";\r\n            wssLogging.sendToast(\"success\", messageBody, messageTitle);\r\n            deferred.resolve(params);\r\n            },\r\n          onFailure: function(error){\r\n            var connErrorType = \"error\";\r\n            var connErrorBody = \"An error has occurred during your password reset request. \";\r\n            connErrorBody +=\"<br/>Please contact your system administrator.\";\r\n            var connErrorTitle = \"Password Reset Request Error!\";\r\n            wssLogging.sendToast(connErrorType, connErrorBody, connErrorTitle);\r\n            deferred.reject(error);\r\n          }\r\n        });\r\n        return deferred.promise;\r\n      };\r\n\r\n\r\n      self.resetCustomer_Password = function(si,ks,ti,pwd){\r\n        var encodedPwd = new XMLMCService.MethodCall().encodeBase64(pwd);\r\n        $http({\r\n          url: 'php/resetPassword.php',\r\n          method: 'POST',\r\n          port: 80,\r\n          data: {\r\n                selfserviceId: si,\r\n                userId: ks,\r\n                tokenId: ti,\r\n                password: encodedPwd\r\n                //password: pwd\r\n                },\r\n          headers: {\r\n                    'Cache-Control':'no-cache',\r\n                    'Accept': 'text/json',\r\n                    'Accept-Language':'en-GB',\r\n                    'Content-Type':'text/xmlmc; charset=UTF-8'\r\n                   }\r\n          }).then(function(goodResponse) {\r\n            //XMLMC has not been done\r\n            if (goodResponse.data==\"invalid\"){\r\n              var connErrorType = \"error\";\r\n              var connErrorTitle = \"Password Reset Error!\";\r\n              var connErrorBody = \"We've been unable to reset your selfservice password.\";\r\n              connErrorBody +=\"<br/>Please re-request your password reset.\";\r\n              wssLogging.sendToast(connErrorType, connErrorBody, connErrorTitle);\r\n              }\r\n              //XMLMC succes\r\n            else{\r\n                var messageTitle = \"Reset password success!\";\r\n                var messageBody = \"You can now log back in to SelfService.\";\r\n                wssLogging.sendToast(messageBody, messageTitle);\r\n                }\r\n            },\r\n          function(error){\r\n            var connErrorBody = \"Please report this to your system administrator.\";\r\n            var connErrorTitle = \"Password Reset Request Error!\";\r\n            var connErrorType = \"error\";\r\n            wssLogging.sendToast(connErrorType, connErrorBody, connErrorTitle);\r\n           });\r\n      };\r\n\r\n      return self;\r\n    }\r\n})();\r\n"]}