{"version":3,"sources":["../../../_itsm_default_v2_template/app/controllers/request.list.auth.ctrl.js"],"names":["angular","module","controller","RequestListAuthCtrl","$inject","$rootScope","$scope","$state","RequestService","wssHelpers","$uibModal","showCog","reqServ","tabs","push","heading","route","active","go","is","$on","forEach","tab","event","args","adminModalSchema","modalInstance","open","animation","templateUrl","size","resolve","items","recordPage","result","then","$broadcast","RequestListMyAuthCtrl","RequestListService","SWSessionService","requestPage","isWssAdmin","hasWebflag","custRequests","loadingRequests","selectedRequest","totalRequests","pageNo","openTableAdminModal","adminModalContent","outputConfigObject","getPagedRequests","checkActiveSession","RequestListManAuthCtrl"],"mappings":"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","file":"request.list.auth.ctrl.js","sourcesContent":["(function () {\r\n    'use strict';\r\n\r\n    //Main Authorisations Requests List controller\r\n    angular\r\n        .module('swSelfService')\r\n        .controller('RequestListAuthCtrl', RequestListAuthCtrl);\r\n    RequestListAuthCtrl.$inject = ['$rootScope','$scope','$state','RequestService','wssHelpers','$uibModal'];\r\n    function RequestListAuthCtrl($rootScope, $scope, $state, RequestService, wssHelpers, $uibModal)\r\n    {\r\n      $scope.showCog = false;\r\n\t  \r\n\t  $scope.reqServ = RequestService;\r\n\r\n      //Get state - for keeping Navbar state active with in child state views\r\n      $rootScope.$state = $state;\r\n\r\n      //Tab Management\r\n      $scope.tabs = [];\r\n      $scope.tabs.push( { heading: \"Pending My Authorisation\", route:\"requestsauth.myauths\", active:false });\r\n      $scope.tabs.push( { heading: \"Pending My Manager's Authorisation\", route:\"requestsauth.managerauths\", active:false });\r\n\r\n      $scope.go = function(route){\r\n          $state.go(route);\r\n      };\r\n      $scope.active = function(route){\r\n          return $state.is(route);\r\n      };\r\n      $scope.$on(\"$stateChangeSuccess\", function() {\r\n        $scope.tabs.forEach(function(tab) {\r\n          tab.active = $scope.active(tab.route);\r\n        });\r\n      });\r\n\r\n      //Look for child broadcast to open Table Admin modal\r\n      $scope.$on('AdminTableModalOpen', function(event, args){\r\n        $rootScope.adminModalSchema = 'table.schema';\r\n        var modalInstance = $uibModal.open({\r\n          animation: true,\r\n          templateUrl: 'templates/admin/modal.tableconfig.tpl.html',\r\n          controller: 'AdminTableController',\r\n          size: 'lg',\r\n          resolve: {\r\n            items: function () {\r\n              return 'requests.'+$rootScope.recordPage;\r\n            }\r\n          }\r\n        });\r\n        modalInstance.result.then(function () {\r\n          //Saved changes - broadcast message to refresh form\r\n          $rootScope.$broadcast('AdminTableModalClose', args);\r\n        }, function () {\r\n          //Cancelled modal - do nothing\r\n        });\r\n      });\r\n\r\n      //Watch for logout broadcast to clean up session-specific data ready for a new user\r\n      $scope.$on('logout',function(){\r\n        $scope.reqServ = {};\r\n      });\r\n    }\r\n\r\n    //Your Authorisations Request List Controller\r\n    angular\r\n        .module('swSelfService')\r\n        .controller('RequestListMyAuthCtrl', RequestListMyAuthCtrl);\r\n    RequestListMyAuthCtrl.$inject = ['$rootScope','$scope','RequestListService','SWSessionService','wssHelpers'];\r\n    function RequestListMyAuthCtrl($rootScope, $scope, RequestListService, SWSessionService, wssHelpers)\r\n    {\r\n      //requestPage is the unique ID for the list pagination directive for this controller\r\n      $scope.requestPage = 'authyour';\r\n      $scope.isWssAdmin = wssHelpers.hasWebflag('OPTION_ADMIN');\r\n      $scope.custRequests = RequestListService;\r\n\r\n      $scope.custRequests.loadingRequests = false;\r\n      $scope.custRequests.selectedRequest = null;\r\n      $scope.custRequests.totalRequests = 0;\r\n      $scope.custRequests.pageNo = 1;\r\n\r\n      //Open Admin Table Modal - broadcast to be picked up and processed by parent controller\r\n      $scope.openTableAdminModal = function() {\r\n        var args = [];\r\n        args.recordPage = $scope.requestPage;\r\n        $rootScope.adminModalContent = 'table.requests.'+$scope.requestPage;\r\n        $rootScope.$broadcast('AdminTableModalOpen', args);\r\n      };\r\n\r\n      //Watch for Admin Table Modal Closing - refresh model if so\r\n      $scope.$on('AdminTableModalClose', function(event, args) {\r\n        if(args.recordPage === $scope.requestPage) {\r\n          $scope.custRequests.outputConfigObject[$scope.requestPage] = [];\r\n          $scope.custRequests.requestPage = $scope.requestPage;\r\n          $scope.custRequests.getPagedRequests();\r\n        }\r\n      });\r\n\r\n      //Watch for logout broadcast to clean up session-specific data ready for a new user\r\n      $scope.$on('logout',function(){\r\n        $scope.custRequests = {};\r\n      });\r\n\r\n      //Check session, if active then get paged requests\r\n      SWSessionService.checkActiveSession().then(function(){\r\n        $scope.custRequests.requestPage = $scope.requestPage;\r\n        $scope.custRequests.pageNo = 1;\r\n        $scope.custRequests.getPagedRequests();\r\n      }, function(){\r\n        //\r\n      });\r\n    }\r\n\r\n\r\n    //Manager Authorisations Request List Controller\r\n    angular\r\n        .module('swSelfService')\r\n        .controller('RequestListManAuthCtrl', RequestListManAuthCtrl);\r\n\r\n    RequestListManAuthCtrl.$inject = ['$rootScope','$scope','RequestListService','SWSessionService','wssHelpers'];\r\n\r\n    function RequestListManAuthCtrl($rootScope, $scope, RequestListService, SWSessionService, wssHelpers)\r\n    {\r\n      //requestPage is the unique ID for the list pagination directive for this controller\r\n      $scope.requestPage = 'authmanager';\r\n      $scope.isWssAdmin = wssHelpers.hasWebflag('OPTION_ADMIN');\r\n      $scope.custRequests = RequestListService;\r\n\r\n      $scope.custRequests.loadingRequests = false;\r\n      $scope.custRequests.selectedRequest = null;\r\n\r\n      //Open Admin Table Modal - broadcast to be picked up and processed by parent controller\r\n      $scope.openTableAdminModal = function() {\r\n        var args = [];\r\n        args.recordPage = $scope.requestPage;\r\n        $rootScope.adminModalContent = 'table.requests.'+$scope.requestPage;\r\n        $rootScope.$broadcast('AdminTableModalOpen', args);\r\n      };\r\n\r\n      //Watch for Admin Table Modal Closing - refresh model if so\r\n      $scope.$on('AdminTableModalClose', function(event, args) {\r\n        if(args.recordPage === $scope.requestPage) {\r\n          $scope.custRequests.outputConfigObject[$scope.requestPage] = [];\r\n          $scope.custRequests.requestPage = $scope.requestPage;\r\n          $scope.custRequests.getPagedRequests();\r\n        }\r\n      });\r\n\r\n      //Watch for logout broadcast to clean up session-specific data ready for a new user\r\n      $scope.$on('logout',function(){\r\n        $scope.custRequests = {};\r\n      });\r\n\r\n      //Check session, if active then get paged requests\r\n      SWSessionService.checkActiveSession().then(function(){\r\n        $scope.custRequests.requestPage = $scope.requestPage;\r\n      }, function(){\r\n        //\r\n      });\r\n    }\r\n\r\n})();\r\n"]}