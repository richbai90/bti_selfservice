{"version":3,"sources":["../../../_itsm_default_v2_template/app/controllers/request.list.ctrl.js"],"names":["angular","module","controller","RequestListCtrl","$inject","$rootScope","$scope","$state","RequestService","wssHelpers","$uibModal","showCog","reqServ","tabs","hasWebflag","push","heading","route","active","isManager","go","is","$on","forEach","tab","event","args","adminModalSchema","modalInstance","open","animation","templateUrl","size","resolve","items","recordPage","result","then","$broadcast","adminModalContent","RequestListCustCtrl","RequestListService","paginationService","SWSessionService","requestPage","isWssAdmin","custRequests","selectedRequest","loadingRequests","totalRequests","sortColumn","sortOrder","modArgs","openTableAdminModal","outputConfigObject","getPagedRequests","checkActiveSession","setCurrentPage","search","pageNo","RequestListRecentCtrl","wssLogging","custRecentRequests","RecentRequestsLoading","custRecentRequestList","getRecentRequests","requests","requestArray","RequestListSiteCtrl","RequestListTeamCtrl","RequestListOrgCtrl","RequestListRelOrgCtrl"],"mappings":"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","file":"request.list.ctrl.js","sourcesContent":["(function () {\r\n    'use strict';\r\n\r\n    //Main Requests List controller\r\n    angular\r\n        .module('swSelfService')\r\n        .controller('RequestListCtrl', RequestListCtrl);\r\n    RequestListCtrl.$inject = ['$rootScope','$scope','$state','RequestService','wssHelpers','$uibModal'];\r\n    function RequestListCtrl($rootScope, $scope, $state, RequestService, wssHelpers, $uibModal)\r\n    {\r\n      $scope.showCog = true;\r\n\t  \r\n\t  //Instantiate Request Service\r\n      $scope.reqServ = RequestService;\r\n      //Get state - for keeping Navbar state active with in child state views\r\n      $rootScope.$state = $state;\r\n\r\n      //Tab Management\r\n      $scope.tabs = [];\r\n      if(wssHelpers.hasWebflag('OPTION_CAN_VIEW_CALLS')){\r\n        $scope.tabs.push({ heading: \"My Requests\", route:\"requests.myrequests\", active:false });\r\n      }\r\n      if(wssHelpers.isManager()){\r\n        $scope.tabs.push( { heading: \"My Teams Requests\", route:\"requests.teamrequests\", active:false });\r\n      }\r\n      if(wssHelpers.hasWebflag('OPTION_CAN_VIEW_SITECALLS')){\r\n        $scope.tabs.push({ heading: \"Site Requests\", route:\"requests.siterequests\", active:false });\r\n      }\r\n      if(wssHelpers.hasWebflag('OPTION_CAN_VIEW_ORGCALLS')){\r\n        $scope.tabs.push({ heading: \"Organisation Requests\", route:\"requests.orgrequests\", active:false });\r\n      }\r\n      if(wssHelpers.hasWebflag('OPTION_CAN_VIEW_MULTI_ORGCALLS')){\r\n        $scope.tabs.push({ heading: \"Related Organisation Requests\", route:\"requests.relorgrequests\", active:false });\r\n      }\r\n\r\n      $scope.go = function(route){\r\n          $state.go(route);\r\n      };\r\n      $scope.active = function(route){\r\n          return $state.is(route);\r\n      };\r\n\r\n      $scope.$on(\"$stateChangeSuccess\", function() {\r\n        $scope.tabs.forEach(function(tab) {\r\n          tab.active = $scope.active(tab.route);\r\n        });\r\n      });\r\n\r\n      //Look for child broadcast to open Table Admin modal\r\n      $scope.$on('AdminTableModalOpen', function(event, args){\r\n        $rootScope.adminModalSchema = 'table.schema';\r\n        var modalInstance = $uibModal.open({\r\n          animation: true,\r\n          templateUrl: 'templates/admin/modal.tableconfig.tpl.html',\r\n          controller: 'AdminTableController',\r\n          size: 'lg',\r\n          resolve: {\r\n            items: function () {\r\n              return 'requests.'+$rootScope.recordPage;\r\n            }\r\n          }\r\n        });\r\n        modalInstance.result.then(function () {\r\n          //Saved changes - broadcast message to refresh form\r\n          $rootScope.$broadcast('AdminTableModalClose', args);\r\n          $rootScope.adminModalSchema = '';\r\n          $rootScope.adminModalContent = '';\r\n        }, function (){\r\n          //Modal cancelled\r\n        });\r\n      });\r\n\r\n      //Watch for logout broadcast to clean up session-specific data ready for a new user\r\n      $scope.$on('logout',function(){\r\n        RequestService = {};\r\n      });\r\n    }\r\n\r\n    //Customer-Filtered Request List Controller\r\n    angular\r\n        .module('swSelfService')\r\n        .controller('RequestListCustCtrl', RequestListCustCtrl);\r\n    RequestListCustCtrl.$inject = ['$rootScope','$scope','RequestListService', 'paginationService', 'SWSessionService','wssHelpers'];\r\n    function RequestListCustCtrl($rootScope, $scope, RequestListService, paginationService, SWSessionService, wssHelpers)\r\n    {\r\n      //requestPage is the unique ID for the list pagination directive for this controller\r\n      $scope.requestPage = 'cust';\r\n      $scope.isWssAdmin = wssHelpers.hasWebflag('OPTION_ADMIN');\r\n      $scope.custRequests = RequestListService;\r\n\r\n      $scope.custRequests.selectedRequest = null;\r\n      $scope.custRequests.loadingRequests = false;\r\n      $scope.custRequests.totalRequests = 0;\r\n      $scope.custRequests.sortColumn = 0;\r\n      $scope.custRequests.sortOrder = false;\r\n      $scope.modArgs = [];\r\n      //Open Admin Table Modal - broadcast to be picked up and processed by parent controller\r\n      $scope.openTableAdminModal = function() {\r\n        $scope.modArgs.recordPage = $scope.requestPage;\r\n        $rootScope.adminModalContent = 'table.requests.'+$scope.requestPage;\r\n        $rootScope.$broadcast('AdminTableModalOpen', $scope.modArgs);\r\n      };\r\n\r\n      //Watch for Admin Table Modal Closing - refresh model if so\r\n      $scope.$on('AdminTableModalClose', function(event, args) {\r\n        if(args.recordPage === $scope.requestPage) {\r\n          $scope.custRequests.outputConfigObject[$scope.requestPage] = [];\r\n          $scope.custRequests.requestPage = $scope.requestPage;\r\n          $scope.custRequests.getPagedRequests();\r\n        }\r\n      });\r\n\r\n      //Check session, if active then get paged requests\r\n      SWSessionService.checkActiveSession().then(function(){\r\n        paginationService.setCurrentPage($scope.requestPage, 1);\r\n        $scope.custRequests.search = '';\r\n        $scope.custRequests.requestPage = $scope.requestPage;\r\n        $scope.custRequests.pageNo = 1;\r\n        $scope.custRequests.getPagedRequests();\r\n      }, function(){\r\n        //\r\n      });\r\n\r\n    }\r\n\r\n\t//Recent Request List Controller\r\n    angular\r\n        .module('swSelfService')\r\n        .controller('RequestListRecentCtrl', RequestListRecentCtrl);\r\n    RequestListRecentCtrl.$inject = ['$scope','RequestService','RequestListService','SWSessionService','wssLogging'];\r\n\tfunction RequestListRecentCtrl($scope, RequestService, RequestListService, SWSessionService, wssLogging)\r\n    {\r\n\t  $scope.custRecentRequests = RequestService;\r\n\t  $scope.custRecentRequests.RecentRequestsLoading = false;\r\n\t  $scope.custRecentRequestList = RequestListService;\r\n\t  $scope.custRecentRequestList.selectedRequest = null;\r\n\r\n      //Check session, if active then get recent requests\r\n      SWSessionService.checkActiveSession().then(function()\r\n\t  {\r\n        $scope.custRecentRequests.getRecentRequests().then(function(requests)\r\n\t\t{\r\n\t\t\t $scope.requestArray = requests;\r\n\t\t});\r\n      });\r\n    }\r\n\r\n    //Site-Filtered Request List Controller\r\n    angular\r\n        .module('swSelfService')\r\n        .controller('RequestListSiteCtrl', RequestListSiteCtrl);\r\n\r\n    RequestListSiteCtrl.$inject = ['$rootScope','$scope','RequestListService', 'paginationService', 'SWSessionService','wssHelpers'];\r\n\r\n    function RequestListSiteCtrl($rootScope, $scope, RequestListService, paginationService, SWSessionService, wssHelpers)\r\n    {\r\n      //requestPage is the unique ID for the list pagination directive for this controller\r\n      $scope.requestPage = 'site';\r\n      $scope.isWssAdmin = wssHelpers.hasWebflag('OPTION_ADMIN');\r\n      $scope.custRequests = RequestListService;\r\n      $scope.custRequests.selectedRequest = null;\r\n      $scope.custRequests.loadingRequests = false;\r\n      $scope.custRequests.sortColumn = 0;\r\n      $scope.custRequests.sortOrder = false;\r\n\r\n      //Open Admin Table Modal - broadcast to be picked up and processed by parent controller\r\n      $scope.openTableAdminModal = function() {\r\n        var args = [];\r\n        args.recordPage = $scope.requestPage;\r\n        $rootScope.adminModalContent = 'table.requests.'+$scope.requestPage;\r\n        $rootScope.$broadcast('AdminTableModalOpen', args);\r\n      };\r\n\r\n      //Watch for Admin Table Modal Closing - refresh model if so\r\n      $scope.$on('AdminTableModalClose', function(event, args) {\r\n        if(args.recordPage === $scope.requestPage) {\r\n          $scope.custRequests.outputConfigObject[$scope.requestPage] = [];\r\n          $scope.custRequests.requestPage = $scope.requestPage;\r\n          $scope.custRequests.getPagedRequests();\r\n        }\r\n      });\r\n\r\n      //Check session, if active then get paged requests\r\n      SWSessionService.checkActiveSession().then(function(){\r\n        paginationService.setCurrentPage($scope.requestPage, 1);\r\n        $scope.custRequests.search = '';\r\n        $scope.custRequests.requestPage = $scope.requestPage;\r\n      }, function(){\r\n        //\r\n      });\r\n\r\n    }\r\n\r\n    //Team-Filtered Request List Controller\r\n    angular\r\n        .module('swSelfService')\r\n        .controller('RequestListTeamCtrl', RequestListTeamCtrl);\r\n\r\n    RequestListTeamCtrl.$inject = ['$rootScope','$scope','RequestListService', 'paginationService', 'SWSessionService','wssHelpers'];\r\n\r\n    function RequestListTeamCtrl($rootScope, $scope, RequestListService, paginationService, SWSessionService, wssHelpers)\r\n    {\r\n      //requestPage is the unique ID for the list pagination directive for this controller\r\n      $scope.requestPage = 'team';\r\n      $scope.isWssAdmin = wssHelpers.hasWebflag('OPTION_ADMIN');\r\n      $scope.custRequests = RequestListService;\r\n      $scope.custRequests.selectedRequest = null;\r\n      $scope.custRequests.loadingRequests = false;\r\n      $scope.custRequests.sortColumn = 0;\r\n      $scope.custRequests.sortOrder = false;\r\n\r\n      //Open Admin Table Modal - broadcast to be picked up and processed by parent controller\r\n      $scope.openTableAdminModal = function() {\r\n        var args = [];\r\n        args.recordPage = $scope.requestPage;\r\n        $rootScope.adminModalContent = 'table.requests.'+$scope.requestPage;\r\n        $rootScope.$broadcast('AdminTableModalOpen', args);\r\n      };\r\n\r\n      //Watch for Admin Table Modal Closing - refresh model if so\r\n      $scope.$on('AdminTableModalClose', function(event, args) {\r\n        if(args.recordPage === $scope.requestPage) {\r\n          $scope.custRequests.outputConfigObject[$scope.requestPage] = [];\r\n          $scope.custRequests.requestPage = $scope.requestPage;\r\n          $scope.custRequests.getPagedRequests();\r\n        }\r\n      });\r\n\r\n      //Check session, if active then get paged requests\r\n      SWSessionService.checkActiveSession().then(function(){\r\n        paginationService.setCurrentPage($scope.requestPage, 1);\r\n        $scope.custRequests.search = '';\r\n        $scope.custRequests.requestPage = $scope.requestPage;\r\n      }, function(){\r\n        //\r\n      });\r\n\r\n    }\r\n\r\n    //Organisation-Filtered Request List Controller\r\n    angular\r\n        .module('swSelfService')\r\n        .controller('RequestListOrgCtrl', RequestListOrgCtrl);\r\n\r\n    RequestListOrgCtrl.$inject = ['$rootScope','$scope','RequestListService', 'paginationService','SWSessionService','wssHelpers'];\r\n\r\n    function RequestListOrgCtrl($rootScope, $scope, RequestListService, paginationService, SWSessionService, wssHelpers)\r\n    {\r\n      //requestPage is the unique ID for the list pagination directive for this controller\r\n      $scope.requestPage = 'org';\r\n      $scope.isWssAdmin = wssHelpers.hasWebflag('OPTION_ADMIN');\r\n      $scope.custRequests = RequestListService;\r\n      $scope.custRequests.selectedRequest = null;\r\n      $scope.custRequests.loadingRequests = false;\r\n      $scope.custRequests.sortColumn = 0;\r\n      $scope.custRequests.sortOrder = false;\r\n\r\n      //Open Admin Table Modal - broadcast to be picked up and processed by parent controller\r\n      $scope.openTableAdminModal = function() {\r\n        var args = [];\r\n        args.recordPage = $scope.requestPage;\r\n        $rootScope.adminModalContent = 'table.requests.'+$scope.requestPage;\r\n        $rootScope.$broadcast('AdminTableModalOpen', args);\r\n      };\r\n\r\n      //Watch for Admin Table Modal Closing - refresh model if so\r\n      $scope.$on('AdminTableModalClose', function(event, args) {\r\n        if(args.recordPage === $scope.requestPage) {\r\n          $scope.custRequests.outputConfigObject[$scope.requestPage] = [];\r\n          $scope.custRequests.requestPage = $scope.requestPage;\r\n          $scope.custRequests.getPagedRequests();\r\n        }\r\n      });\r\n\r\n      //Check session, if active then get paged requests\r\n      SWSessionService.checkActiveSession().then(function(){\r\n        paginationService.setCurrentPage($scope.requestPage, 1);\r\n        $scope.custRequests.search = '';\r\n        $scope.custRequests.requestPage = $scope.requestPage;\r\n      }, function(){\r\n        //\r\n      });\r\n\r\n    }\r\n\r\n    //Related Organisation-Filtered Request List Controller\r\n    angular\r\n        .module('swSelfService')\r\n        .controller('RequestListRelOrgCtrl', RequestListRelOrgCtrl);\r\n\r\n    RequestListRelOrgCtrl.$inject = ['$rootScope','$scope','RequestListService', 'paginationService', 'SWSessionService','wssHelpers'];\r\n\r\n    function RequestListRelOrgCtrl($rootScope, $scope, RequestListService, paginationService, SWSessionService, wssHelpers)\r\n    {\r\n      //requestPage is the unique ID for the list pagination directive for this controller\r\n      $scope.requestPage = 'relorg';\r\n      $scope.isWssAdmin = wssHelpers.hasWebflag('OPTION_ADMIN');\r\n      $scope.custRequests = RequestListService;\r\n      $scope.custRequests.selectedRequest = null;\r\n      $scope.custRequests.loadingRequests = false;\r\n      $scope.custRequests.sortColumn = 0;\r\n      $scope.custRequests.sortOrder = false;\r\n\r\n      //Open Admin Table Modal - broadcast to be picked up and processed by parent controller\r\n      $scope.openTableAdminModal = function() {\r\n        var args = [];\r\n        args.recordPage = $scope.requestPage;\r\n        $rootScope.adminModalContent = 'table.requests.'+$scope.requestPage;\r\n        $rootScope.$broadcast('AdminTableModalOpen', args);\r\n      };\r\n\r\n      //Watch for Admin Table Modal Closing - refresh model if so\r\n      $scope.$on('AdminTableModalClose', function(event, args) {\r\n        if(args.recordPage === $scope.requestPage) {\r\n          $scope.custRequests.outputConfigObject[$scope.requestPage] = [];\r\n          $scope.custRequests.requestPage = $scope.requestPage;\r\n          $scope.custRequests.getPagedRequests();\r\n        }\r\n      });\r\n\r\n      //Check session, if active then get paged requests\r\n      SWSessionService.checkActiveSession().then(function(){\r\n        paginationService.setCurrentPage($scope.requestPage, 1);\r\n        $scope.custRequests.search = '';\r\n        $scope.custRequests.requestPage = $scope.requestPage;\r\n      }, function(){\r\n        //\r\n      });\r\n    }\r\n})();\r\n"]}