{"version":3,"sources":["../../../_itsm_default_v2_template/app/controllers/wizard.ctrl.js"],"names":["angular","module","controller","WizardCtrl","$inject","$scope","WizardDataService","WizardLogService","store","wssLogging","$state","SWSessionService","wizDataServ","oneAtATime","stageLoading","wizardStages","currentStagePK","currentStageID","wizardDetails","wizardName","dataForm","currService","currentArrKey","showSubmit","requestLogging","boolSLASelected","stageFormHolder","answeredQuestion","question","isObject","answer","keys","Object","len","length","isDefined","setStage","stageKey","isHidden","flg_hidden","hasNext","flg_endofwiz","hasPrevious","isCurrentStage","stageId","parseInt","determineWizard","currDataForm","get","instanceConfig","dataFormID","getDataform","then","dataformResponse","fk_wizard","requestClass","defaultSupportWizard","defaultRequestWizard","service","serviceDetails","subscription","prices","basic","request_price","customisation","optional","getDefaultSLAOptions","slaOptions","servicelevel","serviceLevelCost","price","total_cost","total","parseFloat","toFixed","wizardSource","initialiseWizard","error","toastType","toastBody","toastTitle","sendToast","getWizard","wizardResponse","getStageDetails","stageResponse","pk_auto_id","sindex","currentKey","getStageQuestions","questionResponse","questions","getStandardComponents","fk_cmdb_id","callclass","stCompResp","qindex","pk_qid","push","getOptionalComponents","opCompResp","getSLAQuestion","dfSLAs","options","defaultvalue","forEach","qOptVal","keycol","isFormValid","ngForm","i","$broadcast","$invalid","$dirty","hasOwnProperty","goToNext","wizParentForm","toasterTitle","toasterBody","oCurrQuestions","intLastQuestion","nextArrKey","strAnswer","flg_jumponanswer","getJumpRecords","response","goToWizard","goToStage","oJumpVal","check_value_func","fk_nextwiz","fk_wiz","wizCopy","wizStage","getNextStage","nextStageID","goToPrevious","strWizard","intStage","intQID","raiseRequest","componentChange","dataformObj","wizardSubmit","submitResponse","logRequest","populateOCWiz","callref","remove","formattedcallref","go","requestID","initQuestion","checkActiveSession"],"mappings":"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","file":"wizard.ctrl.js","sourcesContent":["(function () {\r\n    'use strict';\r\n\r\n    //Main Services List controller\r\n    angular\r\n        .module('swSelfService')\r\n        .controller('WizardCtrl', WizardCtrl);\r\n        WizardCtrl.$inject = ['$scope','WizardDataService','WizardLogService','store','wssLogging','$state','SWSessionService'];\r\n\r\n    function WizardCtrl($scope, WizardDataService, WizardLogService, store, wssLogging, $state, SWSessionService)\r\n    {\r\n      $scope.wizDataServ = WizardDataService;\r\n\r\n      //Accordian Setup\r\n      $scope.oneAtATime = true;\r\n\r\n      //Clear stage arrays\r\n      $scope.stageLoading = false;\r\n      $scope.wizDataServ.wizardStages = {};\r\n      $scope.currentStagePK = '';\r\n      $scope.currentStageID = '';\r\n      $scope.wizardDetails = [];\r\n      $scope.wizardName = '';\r\n      $scope.wizDataServ.dataForm = [];\r\n      $scope.currService = [];\r\n      $scope.currentArrKey = 0;\r\n      $scope.showSubmit = false;\r\n      $scope.requestLogging = false;\r\n\t  $scope.boolSLASelected = true;\r\n\r\n      $scope.stageFormHolder = {};\r\n\r\n\r\n      //Controls display of answers in right-hand pane\r\n      $scope.answeredQuestion = function(question){\r\n        if(angular.isObject(question.answer)){\r\n          var keys = Object.keys(question.answer);\r\n          var len = keys.length;\r\n          return (len > 0);\r\n        } else {\r\n          return (angular.isDefined(question.answer) && question.answer !== \"\");\r\n        }\r\n      };\r\n\r\n      //Set stage to one that already exists in Wizard stages object - for accordian control\r\n      $scope.setStage = function(stageKey) {\r\n        if(stageKey !== $scope.currentArrKey) {\r\n          $scope.currentArrKey = stageKey;\r\n        }\r\n      };\r\n\r\n      //Controls whether a question is hidden\r\n      $scope.isHidden = function(question) {\r\n        if(question.flg_hidden === '0') {\r\n          return false;\r\n        }\r\n        return true;\r\n      };\r\n\r\n      //Wizard has next stage\r\n      $scope.hasNext = function() {\r\n        $scope.showSubmit = false;\r\n        if($scope.currentStagePK !== ''){\r\n          if ($scope.wizDataServ.wizardStages[$scope.currentArrKey].flg_endofwiz === \"0\") {\r\n            return true;\r\n          } else {\r\n            $scope.showSubmit = true;\r\n          }\r\n        }\r\n        return false;\r\n      };\r\n\r\n      //Wizard has previous stage\r\n      $scope.hasPrevious = function() {\r\n        if($scope.currentArrKey > 0) {\r\n          return true;\r\n        }\r\n        return false;\r\n      };\r\n\r\n      //Wizard on current stage\r\n      $scope.isCurrentStage = function(stageId) {\r\n        if($scope.currentArrKey !== ''){\r\n          if($scope.currentArrKey === parseInt(stageId)) {\r\n            return true;\r\n          }\r\n        }\r\n        return false;\r\n      };\r\n\r\n      //Work out which wizard to use, from dataform or default\r\n      $scope.determineWizard = function(){\r\n        var currDataForm = store.get(\"currDataForm\");\r\n        $scope.wizDataServ.instanceConfig = store.get('instanceConfig');\r\n        if(currDataForm && currDataForm.dataFormID !== '0'){\r\n          //Get Wizard from Dataform\r\n          $scope.wizDataServ.getDataform(currDataForm.dataFormID).then(function(dataformResponse){\r\n            $scope.wizardName = dataformResponse.fk_wizard;\r\n            if(!angular.isDefined($scope.wizardName) || $scope.wizardName === null){\r\n              if (currDataForm.requestClass === 'Incident') {\r\n                $scope.wizardName = WizardDataService.instanceConfig.defaultSupportWizard;\r\n              } else {\r\n                $scope.wizardName = WizardDataService.instanceConfig.defaultRequestWizard;\r\n              }\r\n            }\r\n            $scope.wizDataServ.dataForm = dataformResponse;\r\n            $scope.wizDataServ.dataForm.service = currDataForm.serviceDetails;\r\n            $scope.wizDataServ.dataForm.subscription = currDataForm.subscription;\r\n            $scope.wizDataServ.dataForm.prices = [];\r\n            $scope.wizDataServ.dataForm.prices.basic = currDataForm.subscription.request_price;\r\n            $scope.wizDataServ.dataForm.prices.customisation = 0;\r\n            $scope.wizDataServ.dataForm.prices.optional = 0;\r\n            $scope.currService = currDataForm.serviceDetails;\r\n            //Get default SLA price\r\n            $scope.wizDataServ.getDefaultSLAOptions($scope.wizDataServ.dataForm, $scope.wizDataServ.dataForm.service).then(function(slaOptions){\r\n              if (!$scope.boolSLASelected)\r\n\t\t\t  {\r\n\t\t\t\t  $scope.wizDataServ.dataForm.prices.servicelevel = \"0.00\";\r\n\t\t\t\t  $scope.wizDataServ.dataForm.prices.serviceLevelCost = \"0.00\";\r\n\t\t\t  }\r\n\t\t\t  else\r\n\t\t\t  {\r\n\t\t\t\t  $scope.wizDataServ.dataForm.prices.servicelevel = slaOptions.price;\r\n\t\t\t\t  $scope.wizDataServ.dataForm.prices.serviceLevelCost = slaOptions.total_cost;\r\n\t\t\t  }\r\n\t\t\t  $scope.wizDataServ.dataForm.prices.total = (parseFloat($scope.wizDataServ.dataForm.prices.basic) + parseFloat($scope.wizDataServ.dataForm.prices.customisation) + parseFloat($scope.wizDataServ.dataForm.prices.optional) + parseFloat($scope.wizDataServ.dataForm.prices.servicelevel)).toFixed(2);\r\n\t\t\t  $scope.wizardSource = 'dataform';\r\n\t\t\t  $scope.initialiseWizard();\r\n            });\r\n          }, function(error){\r\n            var toastType = \"error\";\r\n            var toastBody = 'Unable to retrieve the Dataform for this Service Wizard. Please report this to your System Administrator.';\r\n            var toastTitle = \"Wizard Error!\";\r\n            wssLogging.sendToast(toastType, toastBody, toastTitle);\r\n          });\r\n        } else {\r\n          //Get Default Wizard from instance config\r\n          $scope.wizardName = $scope.wizDataServ.instanceConfig.defaultSupportWizard;\r\n          $scope.wizardSource = 'default';\r\n          $scope.initialiseWizard();\r\n        }\r\n      };\r\n\r\n      //Kick off wizard generation\r\n      $scope.initialiseWizard = function() {\r\n        $scope.wizDataServ.getWizard($scope.wizardName).then(function(wizardResponse){\r\n          $scope.wizardDetails = wizardResponse;\r\n          $scope.wizDataServ.getStageDetails($scope.wizardName, 1).then(function(stageResponse){\r\n            $scope.currentStagePK = stageResponse.pk_auto_id;\r\n            $scope.currentStageID = stageResponse.sindex;\r\n            $scope.wizDataServ.wizardStages[$scope.currentArrKey] = stageResponse;\r\n            $scope.wizDataServ.wizardStages[$scope.currentArrKey].currentKey = $scope.currentArrKey;\r\n            $scope.wizDataServ.getStageQuestions($scope.wizDataServ.wizardStages[$scope.currentArrKey].pk_auto_id).then(function(questionResponse){\r\n              $scope.wizDataServ.wizardStages[$scope.currentArrKey].questions = questionResponse;\r\n              $scope.hasNext();\r\n              //If a Dataform and we're in the final wizard stage, then add the Component and SLA questions\r\n              // to the questions array against the stage object\r\n              if($scope.wizardSource === 'dataform' && stageResponse.flg_endofwiz === '1'){\r\n                //Get Standard Components\r\n                $scope.wizDataServ.getStandardComponents($scope.currService.fk_cmdb_id, $scope.wizDataServ.dataForm.callclass).then(function(stCompResp){\r\n                  if(stCompResp !== false){\r\n                    stCompResp.qindex = $scope.wizDataServ.wizardStages[$scope.currentArrKey].questions.length + 1;\r\n                    stCompResp.pk_qid = \"QSTCOMP\";\r\n                    $scope.wizDataServ.wizardStages[$scope.currentArrKey].questions.push(stCompResp);\r\n                  }\r\n                  $scope.wizDataServ.getOptionalComponents($scope.currService.fk_cmdb_id, $scope.wizDataServ.dataForm.callclass).then(function(opCompResp){\r\n                    if(opCompResp !== false){\r\n                      opCompResp.qindex = $scope.wizDataServ.wizardStages[$scope.currentArrKey].questions.length + 1;\r\n                      opCompResp.pk_qid = \"QOPCOMP\";\r\n                      $scope.wizDataServ.wizardStages[$scope.currentArrKey].questions.push(opCompResp);\r\n                    }\r\n                    $scope.wizDataServ.getSLAQuestion($scope.wizDataServ.dataForm, $scope.currService).then(function(dfSLAs){\r\n\t\t\t\t\t  if (Object.keys(dfSLAs.options).length < 1)\r\n\t\t\t\t\t  {\r\n\t\t\t\t\t\t $scope.boolSLASelected = false;\r\n\t\t\t\t\t  }\r\n                      $scope.stageLoading = false;\r\n                      dfSLAs.qindex = $scope.wizDataServ.wizardStages[$scope.currentArrKey].questions.length + 1;\r\n                      dfSLAs.pk_qid = \"QSLA\";\r\n                      //Cycle through SLA question options, add to answer object if we match default value\r\n                      if( angular.isDefined(dfSLAs.defaultvalue) &&\r\n                      dfSLAs.defaultvalue !== \"\"){\r\n                        angular.forEach(dfSLAs.options, function(qOptVal){\r\n                          if(qOptVal.keycol === dfSLAs.defaultvalue){\r\n                            dfSLAs.answer = qOptVal;\r\n                          }\r\n                        });\r\n                      }\r\n                      $scope.wizDataServ.wizardStages[$scope.currentArrKey].questions.push(dfSLAs);\r\n                    }, function(error){\r\n                      $scope.stageLoading = false;\r\n                      var toastType = \"error\";\r\n                      var toastBody = 'Unable to build the SLA question for this Service Wizard. Please report this to your System Administrator.';\r\n                      var toastTitle = \"Wizard Error!\";\r\n                      wssLogging.sendToast(toastType, toastBody, toastTitle);\r\n                    });\r\n                  });\r\n                });\r\n\r\n              } else {\r\n                $scope.stageLoading = false;\r\n                //$scope.wizDataServ.wizardStages[$scope.currentArrKey].questions = questionResponse;\r\n              }\r\n            }, function(error){\r\n              $scope.stageLoading = false;\r\n              var toastType = \"error\";\r\n              var toastBody = 'Unable to retrieve the questions for this Service Wizard Stage. Please report this to your System Administrator.';\r\n              var toastTitle = \"Wizard Error!\";\r\n              wssLogging.sendToast(toastType, toastBody, toastTitle);\r\n            });\r\n          }, function(error){\r\n            $scope.stageLoading = false;\r\n            var toastType = \"error\";\r\n            var toastBody = 'Unable to retrieve the Stage details for this Service Wizard Stage. Please report this to your System Administrator.';\r\n            var toastTitle = \"Wizard Error!\";\r\n            wssLogging.sendToast(toastType, toastBody, toastTitle);\r\n          });\r\n        }, function(error){\r\n          $scope.stageLoading = false;\r\n          var toastType = \"error\";\r\n          var toastBody = 'Unable to retrieve the Wizard details for this Service Wizard Stage. Please report this to your System Administrator.';\r\n          var toastTitle = \"Wizard Error!\";\r\n          wssLogging.sendToast(toastType, toastBody, toastTitle);\r\n        });\r\n      };\r\n\r\n\r\n      $scope.isFormValid = function ($scope, ngForm) {\r\n        var i = null;\r\n        //$scope.$emit('$validate');\r\n        $scope.$broadcast('$validate');\r\n\r\n        if(! ngForm.$invalid) {\r\n          return true;\r\n        } else {\r\n          // make the form fields '$dirty' so that the validation messages would be shown\r\n          ngForm.$dirty = true;\r\n\r\n          for(i in ngForm) {\r\n            if( ngForm[i] && ngForm[i].hasOwnProperty &&\r\n                ngForm[i].hasOwnProperty('$dirty') &&\r\n                ngForm[i].$invalid === true &&\r\n                ngForm[i].hasOwnProperty('$dirty') &&\r\n                ngForm[i].$invalid === true) { // TODO: is 'field.$invalid' test required?\r\n              ngForm[i].$invalid = true;\r\n            }\r\n          }\r\n        }\r\n      };\r\n\r\n      //Go to next stage\r\n      $scope.goToNext = function(){\r\n        var ngForm = $scope.wizParentForm['stageForm_' + $scope.currentArrKey];\r\n        if(!$scope.isFormValid($scope, ngForm)) { // trigger manual validation\r\n          var toasterTitle = \"Form incomplete!\";\r\n          var toasterBody = \"All questions marked in <strong>RED</strong> must be completed before you can continue!\";\r\n          wssLogging.sendToast('error', toasterBody, toasterTitle);\r\n          return;\r\n        }\r\n\r\n        if($scope.wizDataServ.wizardStages[$scope.currentArrKey].flg_endofwiz !== \"1\") {\r\n\r\n          //More stages to come\r\n          var oCurrQuestions = [];\r\n          var intLastQuestion = 0;\r\n          var nextArrKey = $scope.currentArrKey + 1;\r\n          var strAnswer = '';\r\n          if(angular.isObject($scope.wizDataServ.wizardStages[nextArrKey])){\r\n            //So we already have next stages - user has navigated backwards\r\n            //Is the next stage on the object the same as where the current jump would go to?\r\n            //If so, increment currentArrKey\r\n            //If not, remove everything from wizardStages after current stage, jump to next stage...\r\n            oCurrQuestions = $scope.wizDataServ.wizardStages[$scope.currentArrKey].questions;\r\n            intLastQuestion = oCurrQuestions.length - 1;\r\n            if(angular.isDefined(oCurrQuestions[intLastQuestion].flg_jumponanswer) && oCurrQuestions[intLastQuestion].flg_jumponanswer === \"1\"){\r\n              //Get answer from final question\r\n              if(angular.isObject(oCurrQuestions[intLastQuestion].answer) && angular.isDefined(oCurrQuestions[intLastQuestion].answer.keycol)){\r\n                //If answer is an object, then this has come from a Selectbox or Radiobox - LOGICAL choices\r\n                strAnswer = oCurrQuestions[intLastQuestion].answer.keycol;\r\n              } else {\r\n                //Answer is a string - comes from a Text input - SURELY people don't use this??\r\n                strAnswer = oCurrQuestions[intLastQuestion].answer;\r\n              }\r\n              //Get jump records for this question\r\n              $scope.wizDataServ.getJumpRecords(oCurrQuestions[intLastQuestion].pk_qid).then(function(response){\r\n                var goToWizard = '';\r\n                var goToStage = '';\r\n                //Go through the returned jump records, if we have a match to the answer then jump to this wizard/stage\r\n                angular.forEach(response, function(oJumpVal){\r\n                  if(oJumpVal.check_value_func === strAnswer) {\r\n                    goToWizard = oJumpVal.fk_nextwiz;\r\n                    goToStage = oJumpVal.sindex;\r\n                  }\r\n                });\r\n\r\n                if(goToWizard === $scope.wizDataServ.wizardStages[nextArrKey].fk_wiz && goToStage === $scope.wizDataServ.wizardStages[nextArrKey].sindex) {\r\n                  //Same route - increment array key to update model\r\n                  $scope.currentArrKey++;\r\n                } else {\r\n                  //Remove everything after current stage form wizardStages object\r\n                  var wizCopy = {};\r\n                  angular.forEach($scope.wizDataServ.wizardStages, function(wizStage, stageKey){\r\n                    if(stageKey < nextArrKey){\r\n                      wizCopy[stageKey] = wizStage;\r\n                    }\r\n                  });\r\n                  $scope.wizDataServ.wizardStages = wizCopy;\r\n                  //Go get and populate the next stage!\r\n                  $scope.getNextStage(goToWizard, goToStage);\r\n                }\r\n              });\r\n            } else {\r\n              $scope.currentArrKey++;\r\n            }\r\n          } else {\r\n            oCurrQuestions = $scope.wizDataServ.wizardStages[$scope.currentArrKey].questions;\r\n            intLastQuestion = oCurrQuestions.length - 1;\r\n            if(angular.isDefined(oCurrQuestions[intLastQuestion].flg_jumponanswer) && oCurrQuestions[intLastQuestion].flg_jumponanswer === \"1\"){\r\n              //Get answer from final question\r\n              if(angular.isObject(oCurrQuestions[intLastQuestion].answer) && angular.isDefined(oCurrQuestions[intLastQuestion].answer.keycol)){\r\n                //If answer is an object, then this has come from a Selectbox or Radiobox - LOGICAL choices\r\n                strAnswer = oCurrQuestions[intLastQuestion].answer.keycol;\r\n              } else {\r\n                //Answer is a string - comes from a Text input - SURELY people don't use this??\r\n                strAnswer = oCurrQuestions[intLastQuestion].answer;\r\n              }\r\n              //Get jump records for this question\r\n              $scope.wizDataServ.getJumpRecords(oCurrQuestions[intLastQuestion].pk_qid).then(function(response){\r\n                //Go through the returned jump records, if we have a match to the answer then jump to this wizard/stage\r\n                angular.forEach(response, function(oJumpVal){\r\n                  if(oJumpVal.check_value_func === strAnswer) {\r\n                    $scope.getNextStage(oJumpVal.fk_nextwiz, oJumpVal.sindex);\r\n                  }\r\n                });\r\n              });\r\n            } else {\r\n              //We don't have a jump - continue to next incremental stage\r\n              var nextStageID = parseInt($scope.currentStageID) + 1;\r\n              $scope.getNextStage($scope.wizardName, nextStageID);\r\n            }\r\n          }\r\n        } else {\r\n//          angular.forEach($scope.stageFormHolder[$scope.currentArrKey].$error.required, function(errVal, errKey){\r\n//            wssLogging.logger(errVal, \"ERROR\", \"WizardCtrl::goToNext\", true, false);\n//          });\r\n        }\r\n      };\r\n\r\n      //Go to previous stage\r\n      $scope.goToPrevious = function(){\r\n        $scope.showSubmit = false;\r\n        if($scope.currentArrKey !== 0){\r\n          if($scope.currentStagePK !== ''){\r\n            if ($scope.wizDataServ.wizardStages[$scope.currentArrKey].flg_endofwiz === \"1\") {\r\n              $scope.showSubmit = true;\r\n            }\r\n          }\r\n          $scope.currentArrKey--;\r\n        }\r\n      };\r\n\r\n      //Get and set next stage data\r\n      $scope.getNextStage = function(strWizard, intStage, intQID) {\r\n        $scope.wizDataServ.getStageDetails(strWizard, intStage).then(function(stageResponse){\r\n          $scope.currentStagePK = stageResponse.pk_auto_id;\r\n          $scope.currentStageID = stageResponse.sindex;\r\n          $scope.currentArrKey++;\r\n          $scope.wizDataServ.wizardStages[$scope.currentArrKey] = stageResponse;\r\n          $scope.wizDataServ.wizardStages[$scope.currentArrKey].currentKey = $scope.currentArrKey;\r\n          $scope.wizDataServ.getStageQuestions($scope.currentStagePK).then(function(questionResponse){\r\n            //If a Dataform and we're in the final wizard stage, then add an SLA question\r\n            // to the questions array against the stage object\r\n            $scope.wizDataServ.wizardStages[$scope.currentArrKey].questions = questionResponse;\r\n            $scope.hasNext();\r\n            if($scope.wizardSource === 'dataform' && stageResponse.flg_endofwiz === '1'){\r\n              $scope.wizDataServ.getStandardComponents($scope.currService.fk_cmdb_id, $scope.wizDataServ.dataForm.callclass).then(function(stCompResp){\r\n                if(stCompResp !== false){\r\n                  stCompResp.qindex = $scope.wizDataServ.wizardStages[$scope.currentArrKey].questions.length + 1;\r\n                  stCompResp.pk_qid = \"QSTCOMP\";\r\n                  $scope.wizDataServ.wizardStages[$scope.currentArrKey].questions.push(stCompResp);\r\n                }\r\n                $scope.wizDataServ.getOptionalComponents($scope.currService.fk_cmdb_id, $scope.wizDataServ.dataForm.callclass).then(function(opCompResp){\r\n                  if(opCompResp !== false){\r\n                    opCompResp.qindex = $scope.wizDataServ.wizardStages[$scope.currentArrKey].questions.length + 1;\r\n                    opCompResp.pk_qid = \"QOPCOMP\";\r\n                    $scope.wizDataServ.wizardStages[$scope.currentArrKey].questions.push(opCompResp);\r\n                  }\r\n                  $scope.wizDataServ.getSLAQuestion($scope.wizDataServ.dataForm, $scope.currService).then(function(dfSLAs){\r\n\t\t\t\t    if (Object.keys(dfSLAs.options).length < 1)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t $scope.boolSLASelected = false;\r\n\t\t\t\t\t}\r\n                    $scope.stageLoading = false;\r\n                    dfSLAs.qindex = $scope.wizDataServ.wizardStages[$scope.currentArrKey].questions.length + 1;\r\n                    dfSLAs.pk_qid = \"QSLA\";\r\n                    //Cycle through SLA question options, add to answer object if we match default value\r\n                    if( angular.isDefined(dfSLAs.defaultvalue) &&\r\n                        dfSLAs.defaultvalue !== \"\"){\r\n                      angular.forEach(dfSLAs.options, function(qOptVal){\r\n                        if(qOptVal.keycol === dfSLAs.defaultvalue){\r\n                            dfSLAs.answer = qOptVal;\r\n                        }\r\n                      });\r\n                    }\r\n                    $scope.wizDataServ.wizardStages[$scope.currentArrKey].questions.push(dfSLAs);\r\n                  }, function(error){\r\n                    $scope.stageLoading = false;\r\n                    var toastType = \"error\";\r\n                    var toastBody = 'Unable to build the SLA question for this Service Wizard. Please report this to your System Administrator.';\r\n                    var toastTitle = \"Wizard Error!\";\r\n                    wssLogging.sendToast(toastType, toastBody, toastTitle);\r\n                  });\r\n                });\r\n              });\r\n\r\n            } else {\r\n              $scope.stageLoading = false;\r\n            }\r\n          }, function(error){\r\n            var toastType = \"error\";\r\n            var toastBody = 'Unable to retrieve the questions for this Service Wizard Stage. Please report this to your System Administrator.';\r\n            var toastTitle = \"Wizard Error!\";\r\n            wssLogging.sendToast(toastType, toastBody, toastTitle);\r\n          });\r\n        }, function(error){\r\n          var toastType = \"error\";\r\n          var toastBody = 'Unable to retrieve the Stage details for this Service Wizard Stage. Please report this to your System Administrator.';\r\n          var toastTitle = \"Wizard Error!\";\r\n          wssLogging.sendToast(toastType, toastBody, toastTitle);\r\n        });\r\n      };\r\n\r\n      //Raise new request from provided wizard data\r\n      $scope.raiseRequest = function(){\r\n        var ngForm = $scope.wizParentForm['stageForm_' + $scope.currentArrKey];\r\n        if(!$scope.isFormValid($scope, ngForm)) { // trigger manual validation\r\n          var toasterTitle = \"Form incomplete!\";\r\n          var toasterBody = \"All questions marked in <strong>RED</strong> must be completed before this stage can continue!\";\r\n          wssLogging.sendToast('error', toasterBody, toasterTitle);\r\n          return;\r\n        }\r\n\t\telse if (!$scope.boolSLASelected)\r\n\t\t{\r\n\t\t  var toasterTitle = \"Configuration Error!\";\r\n\t\t  var toasterBody = \"The Service definition has not been configured correctly. Please inform the System Administrator.\";\r\n\t\t  wssLogging.sendToast('error', toasterBody, toasterTitle);\r\n\t\t  return;\t\r\n\t\t}\r\n\r\n        //Doo the cost/price calculations before submission\r\n        $scope.wizDataServ.componentChange();\r\n\r\n        $scope.requestLogging = true;\r\n        var dataformObj = {};\r\n        if($scope.wizardSource === 'dataform'){\r\n          dataformObj = $scope.wizDataServ.dataForm;\r\n        }\r\n\r\n        WizardLogService.wizardSubmit($scope.wizardDetails, $scope.wizDataServ.wizardStages, dataformObj, $scope.wizardSource).then(function(submitResponse){\r\n          //Once we've built the Wizard data, log the request!\r\n          WizardLogService.logRequest().then(function(response){\r\n            //Toaster with response\r\n            WizardLogService.populateOCWiz(response.callref, $scope.wizardDetails, $scope.wizDataServ.wizardStages);\r\n            store.remove(\"currDataForm\");\r\n            $scope.requestLogging = false;\r\n            var toasterTitle = \"Request raised successfully!\";\r\n            var toasterBody = \"Reference: <strong>\"+response.formattedcallref+\"</strong>\";\r\n            wssLogging.sendToast('success', toasterBody, toasterTitle);\r\n            $state.go('requestdetails', {requestID: response.formattedcallref});\r\n          }, function(error){\r\n\r\n            if (error==\"SLA invalid: 'Not configured'\" ){\r\n                var toasterBody= \"The SLA Priority definition in the Service has not been configured correctly. Please inform the System Administrator.\";\r\n            }\r\n\r\n            else\r\n              var toasterBody = \"We've been unable to raise your request at this time. Please report this to your System Administrator should this behaviour continue.\";\r\n\r\n\r\n\r\n            store.remove(\"currDataForm\");\r\n            $scope.requestLogging = false;\r\n            var toasterTitle = \"Error raising request!\";\r\n            \r\n            wssLogging.sendToast('error', toasterBody, toasterTitle);\r\n          });\r\n        }, function(error){\r\n          $scope.requestLogging = false;\r\n          var toastType = \"error\";\r\n          var toastBody = 'Unable to process the Wizard responses to raise your request at this time. Please report this to your System Administrator should this behaviour continue.';\r\n          var toastTitle = \"Error raising request!\";\r\n          wssLogging.sendToast(toastType, toastBody, toastTitle);\r\n        });\r\n      };\r\n\r\n      //Initialise relevant question inputs - setting value to blank string\r\n      //Fixes an issue with the Date fields\r\n      $scope.initQuestion = function(question){\r\n        if(!angular.isObject(question.answer)){\r\n          question.answer = '';\r\n        }\r\n      };\r\n\r\n      //Check session, if active then determine which wizard to use - run it!\r\n      SWSessionService.checkActiveSession().then(function(){\r\n        $scope.stageLoading = true;\r\n        $scope.determineWizard();\r\n      }, function(){\r\n        //No active session - checkActiveSession will deal with this\r\n      });\r\n\r\n    }\r\n}());\r\n"]}