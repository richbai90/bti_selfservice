{"version":3,"sources":["../../../../_itsm_default_v2_template/app/directives/bti-tree-selector/bti-tree-selector-2.js"],"names":["angular","module","directive","restrict","templateUrl","transclude","scope","require","bindToController","data","display","value","className","style","onSelect","controllerAs","controller","options","copy","focused","currentLevel","id","hasChildren","option","Array","isArray","children","length","getOptionByID","arrID","split","find","el","reduce","acc","cv","ci","name","updateOptions","navigate","crumb","call","model","$setViewValue","undefined","$setValidity","focus","select","blur","preventDeFocus","hover","category","hoverOut","bind","link","elem","attr","ctrl","treeSelector"],"mappings":"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","file":"bti-tree-selector-2.js","sourcesContent":["(() => {\r\n  'use strict';\r\n  angular\r\n    .module('swSelfService')\r\n    .directive('btiTreeSelector', [\r\n      () => ({\r\n        restrict: 'E',\r\n        templateUrl: 'app/directives/bti-tree-selector/bti-tree-selector.tpl2.html',\r\n        transclude: true,\r\n        scope: true,\r\n        require: 'ngModel',\r\n        bindToController: {\r\n          data: '<',\r\n          display: '@',\r\n          value: '@',\r\n          className: '@class',\r\n          style: '@',\r\n          onSelect: '<',\r\n        },\r\n\r\n        controllerAs: 'treeSelector',\r\n        controller ()  {\r\n          this.options = angular.copy(this.data);\r\n          this.focused = false;\r\n          this.currentLevel = { id: 'top', display: 'Select a Category' };\r\n\r\n          function hasChildren(option) {\r\n            return (!Array.isArray(option) && (option.children && option.children.length));\r\n          }\r\n\r\n          function getOptionByID(id, options) {\r\n            let option;\r\n            if (id === 'top') {\r\n              return options;\r\n            }\r\n            const arrID = id.split(' -> ');\r\n            if (arrID.length === 1) {\r\n              option = options.find(el => el.id === id);\r\n            } else {\r\n              option = arrID.reduce((acc, cv, ci) => (ci ? acc.children.find(el => el.name === cv) : options.find(el => el.name === acc)), arrID[0])\r\n            }\r\n\r\n            return option;\r\n          }\r\n\r\n          const updateOptions = (options, data) => {\r\n            const option = typeof options === 'string' ? getOptionByID(options, data) : options;\r\n            const children = hasChildren(option);\r\n            this.options = angular.copy(children ? option.children : option);\r\n          };\r\n\r\n\r\n          const navigate = crumb => {\r\n            const option = getOptionByID.call(this, crumb.id, this.data);\r\n            updateOptions.call(this, option, this.data);\r\n            if (crumb.id === 'top') {\r\n              this.model.$setViewValue(this.onSelect(undefined));\r\n              this.model.$setValidity('completeselect', false);\r\n            } else {\r\n              if (!option.children.length) {\r\n                this.model.$setViewValue(this.onSelect([option]));\r\n                this.model.$setValidity('completeselect', true);\r\n              } else {\r\n                this.model.$setValidity('completeselect', false);\r\n                this.model.$setViewValue(this.onSelect(undefined))\r\n                this.focus();\r\n              }\r\n            }\r\n\r\n            this.currentLevel = crumb;\r\n          };\r\n\r\n          const select = option => {\r\n            updateOptions(option.children, this.data);\r\n            this.currentLevel = { id: option.id, display: option.name };\r\n            if (!option.children.length) {\r\n              this.model.$setViewValue(this.onSelect([option]));\r\n              this.model.$setValidity('completeselect', true);\r\n            } else {\r\n              this.model.$setValidity('completeselect', false)\r\n            }\r\n\r\n\r\n          };\r\n\r\n          this.focus = () => {\r\n            this.focused = true\r\n          };\r\n\r\n          this.blur = () => {\r\n            if (!this.preventDeFocus || !this.options.length) {\r\n              this.focused = false;\r\n            }\r\n          };\r\n\r\n          this.hover = category => {\r\n            this.category = category;\r\n            this.preventDeFocus = true;\r\n          };\r\n\r\n          this.hoverOut = () => {\r\n            this.category = '';\r\n            this.preventDeFocus = false;\r\n          };\r\n\r\n          this.select = select.bind(this);\r\n          this.navigate = navigate.bind(this);\r\n\r\n        },\r\n        link(scope, elem, attr, ctrl) {\r\n          scope.treeSelector.model = ctrl;\r\n          elem.attr('class', '');\r\n        }\r\n      }),\r\n    ])\r\n})();"]}